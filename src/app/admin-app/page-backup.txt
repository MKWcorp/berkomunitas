'use client';
import { useState, useEffect } from 'react';
import { useUser } from '@clerk/nextjs';
import { 
  ChartBarSquareIcon, 
  GiftIcon, 
  SparklesIcon, 
  TrophyIcon,
  ClipboardDocumentListIcon,
  ShieldCheckIcon,
  CurrencyDollarIcon,
  PencilIcon,
  TrashIcon
} from '@heroicons/react/24/outline';

// Helper function to get email from member object
function getMemberEmail(member) {
  if (!member) return '';
  // Handle new structure with member_emails relation
  if (member.member_emails && member.member_emails.length > 0) {
    return member.member_emails[0].email;
  }
  // Fallback to direct email property (if exists)
  return member.email || '';
}

const TABS = [
  { key: 'dashboard', label: 'Dashboard', icon: ChartBarSquareIcon },
  { key: 'rewards', label: 'Kelola Hadiah', icon: GiftIcon },
  { key: 'badges', label: 'Kelola Lencana', icon: SparklesIcon },
  { key: 'levels', label: 'Kelola Level', icon: TrophyIcon },
  { key: 'tugas', label: 'Kelola Tugas', icon: ClipboardDocumentListIcon },
  { key: 'privileges', label: 'Kelola Hak Akses', icon: ShieldCheckIcon },
  { key: 'points', label: 'Monitoring Poin', icon: CurrencyDollarIcon },
];

export default function AdminPage() {
  const { user, isLoaded } = useUser();
  const [isAdmin, setIsAdmin] = useState(null);
  const [tab, setTab] = useState('dashboard');

  useEffect(() => {
    if (!isLoaded) return;
    if (!user?.primaryEmailAddress?.emailAddress) {
      setIsAdmin(false);
      return;
    }
    fetch('/api/admin/privileges', {
      headers: { 'x-user-email': user.primaryEmailAddress.emailAddress }
    })
      .then(res => setIsAdmin(res.status !== 403))
      .catch(() => setIsAdmin(false));
  }, [user, isLoaded]);

  if (!isLoaded) return <div className="p-8 text-center">Checking admin access...</div>;
  if (isAdmin === false) return <div className="p-8 text-center text-red-500 font-bold">Access Denied</div>;

  return (
    <div className="max-w-7xl mx-auto p-4">
      <h1 className="text-3xl font-bold mb-6">Admin Dashboard</h1>      <div className="flex border-b mb-6">
        {TABS.map(t => {
          const IconComponent = t.icon;
          return (
            <button
              key={t.key}
              className={`px-4 py-2 font-semibold border-b-2 transition-colors flex items-center gap-2 ${tab === t.key ? 'border-blue-600 text-blue-700' : 'border-transparent text-gray-500 hover:text-blue-600'}`}
              onClick={() => setTab(t.key)}
            >
              <IconComponent className="w-4 h-4" />
              {t.label}
            </button>
          );
        })}
      </div>
      <div className="bg-white rounded-lg shadow p-6">
        {tab === 'dashboard' && <DashboardTab />}
        {tab === 'rewards' && <CrudTab resource="rewards" />}
        {tab === 'badges' && <BadgesManagementTab />}
        {tab === 'levels' && <CrudTab resource="levels" />}
        {tab === 'tugas' && <CrudTab resource="tugas" />}
        {tab === 'privileges' && <PrivilegesTab />}
        {tab === 'points' && <PointsMonitoringTab />}
      </div>
    </div>
  );
}

// --- Dashboard Tab ---
function DashboardTab() {
  const { user, isLoaded } = useUser();
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchDashboard = async () => {
      if (!isLoaded) return;
      
      if (!user) {
        setError('Silakan login sebagai admin.');
        setLoading(false);
        return;
      }

      try {
        setLoading(true);
        const response = await fetch('/api/admin/dashboard', { 
          credentials: 'include' 
        });
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.json();
        setData(result);
      } catch (err) {
        setError('Gagal memuat data statistik: ' + err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchDashboard();
  }, [user, isLoaded]);

  if (loading) return <div className="text-center py-8">Memuat statistik...</div>;
  if (error) return <div className="text-center text-red-500 py-8">{error}</div>;
  if (!data) return null;

  return (
    <div className="space-y-8">
      {/* Statistik Global */}
      <div>
        <h2 className="text-xl font-bold mb-4">Statistik Global</h2>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          {data.statistik_global?.map((stat, i) => (
            <div key={stat.nama_statistik || `stat-${i}`} className="bg-blue-50 rounded shadow p-4 text-center">
              <div className="text-xs text-gray-500 mb-1">{stat.nama_statistik}</div>
              <div className="text-2xl font-bold text-blue-800">{stat.nilai_statistik}</div>
            </div>
          ))}
        </div>
      </div>

      {/* Statistik Harian */}
      <div>
        <h2 className="text-lg font-semibold mb-2">Statistik Harian (30 Hari Terakhir)</h2>
        <div className="overflow-x-auto">
          <table className="min-w-full text-xs md:text-sm border">
            <thead className="bg-gray-100">
              <tr>
                <th className="px-2 py-1 border">Tanggal</th>
                <th className="px-2 py-1 border">Tugas Selesai</th>
                <th className="px-2 py-1 border">Member Baru</th>
              </tr>
            </thead>
            <tbody>
              {data.statistik_harian?.map((row, i) => (
                <tr key={`harian-${i}-${row.tanggal}`} className="even:bg-gray-50">
                  <td className="px-2 py-1 border">
                    {(() => {
                      if (!row.tanggal) return '-';
                      if (typeof row.tanggal === 'string') return row.tanggal.slice(0, 10);
                      try {
                        const date = new Date(row.tanggal);
                        if (isNaN(date.getTime())) return '-';
                        return date.toISOString().slice(0, 10);
                      } catch (e) {
                        return '-';
                      }
                    })()}
                  </td>
                  <td className="px-2 py-1 border text-center">{row.total_tugas_selesai}</td>
                  <td className="px-2 py-1 border text-center">{row.total_member_baru}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Peringkat Komentator */}
      <div>
        <h2 className="text-lg font-semibold mb-2">Top 20 Komentator</h2>
        <div className="overflow-x-auto">
          <table className="min-w-full text-xs md:text-sm border">
            <thead className="bg-gray-100">
              <tr>
                <th className="px-2 py-1 border">Peringkat</th>
                <th className="px-2 py-1 border">Username</th>
                <th className="px-2 py-1 border">Jumlah Komentar</th>
              </tr>
            </thead>
            <tbody>
              {data.peringkat_comments?.map((row, i) => (
                <tr key={`comments-${row.peringkat || i}`} className="even:bg-gray-50">
                  <td className="px-2 py-1 border text-center">{row.peringkat}</td>
                  <td className="px-2 py-1 border">{row.username_sosmed}</td>
                  <td className="px-2 py-1 border text-center">{row.jumlah_komentar}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Peringkat Loyalitas */}
      <div>
        <h2 className="text-lg font-semibold mb-2">Top 20 Poin Loyalitas</h2>
        <div className="overflow-x-auto">
          <table className="min-w-full text-xs md:text-sm border">
            <thead className="bg-gray-100">
              <tr>
                <th className="px-2 py-1 border">Peringkat</th>
                <th className="px-2 py-1 border">Nama</th>
                <th className="px-2 py-1 border">Total Poin</th>
              </tr>
            </thead>
            <tbody>
              {data.peringkat_loyalty?.map((row, i) => (
                <tr key={`loyalty-${row.peringkat || i}`} className="even:bg-gray-50">
                  <td className="px-2 py-1 border text-center">{row.peringkat}</td>
                  <td className="px-2 py-1 border">{row.nama_lengkap}</td>
                  <td className="px-2 py-1 border text-center">{row.total_loyalty_point}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Peringkat Tugas Populer */}
      <div>
        <h2 className="text-lg font-semibold mb-2">Tugas Populer</h2>
        <div className="overflow-x-auto">
          <table className="min-w-full text-xs md:text-sm border">
            <thead className="bg-gray-100">
              <tr>
                <th className="px-2 py-1 border">Peringkat</th>
                <th className="px-2 py-1 border">Keyword</th>
                <th className="px-2 py-1 border">Jumlah Pengerjaan</th>
              </tr>
            </thead>
            <tbody>
              {data.peringkat_tugas?.map((row, i) => (
                <tr key={`tugas-${row.peringkat || i}`} className="even:bg-gray-50">
                  <td className="px-2 py-1 border text-center">{row.peringkat}</td>
                  <td className="px-2 py-1 border">{row.keyword_tugas}</td>
                  <td className="px-2 py-1 border text-center">{row.jumlah_pengerjaan}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Peringkat Sumber Tugas */}
      <div>
        <h2 className="text-lg font-semibold mb-2">Peringkat Sumber Tugas</h2>
        <div className="overflow-x-auto">
          <table className="min-w-full text-xs md:text-sm border">
            <thead className="bg-gray-100">
              <tr>
                <th className="px-2 py-1 border">Peringkat</th>
                <th className="px-2 py-1 border">Sumber</th>
                <th className="px-2 py-1 border">Jumlah Komentar</th>
              </tr>
            </thead>
            <tbody>
              {data.peringkat_sumber?.map((row, i) => (
                <tr key={`sumber-${row.peringkat || i}`} className="even:bg-gray-50">
                  <td className="px-2 py-1 border text-center">{row.peringkat}</td>
                  <td className="px-2 py-1 border">{row.source_profile_link}</td>
                  <td className="px-2 py-1 border text-center">{row.jumlah_komentar}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}

// --- Generic CRUD Tab ---
function CrudTab({ resource }) {
  // Only implement for rewards, badges, levels, tugas
  const isRewards = resource === 'rewards';
  const isBadges = resource === 'badges';
  const isLevels = resource === 'levels';
  const isTugas = resource === 'tugas';

  // --- REWARDS CRUD ---
  const [rewards, setRewards] = useState([]);
  const [rewardsLoading, setRewardsLoading] = useState(true);
  const [rewardsError, setRewardsError] = useState(null);
  const [showRewardsModal, setShowRewardsModal] = useState(false);
  const [editReward, setEditReward] = useState(null);
  const [rewardForm, setRewardForm] = useState({ reward_name: '', description: '', point_cost: 0 });
  const [savingReward, setSavingReward] = useState(false);

  useEffect(() => {
    if (!isRewards) return;
    setRewardsLoading(true);
    fetch('/api/admin/rewards')
      .then(res => res.ok ? res.json() : Promise.reject(res))
      .then(setRewards)
      .catch(() => setRewardsError('Gagal memuat data hadiah.'))
      .finally(() => setRewardsLoading(false));
  }, [isRewards]);

  function openAddRewardModal() {
    setEditReward(null);
    setRewardForm({ reward_name: '', description: '', point_cost: 0 });
    setShowRewardsModal(true);
  }
  function openEditRewardModal(item) {
    setEditReward(item);
    setRewardForm({ reward_name: item.reward_name, description: item.description, point_cost: item.point_cost });
    setShowRewardsModal(true);
  }
  function closeRewardModal() {
    setShowRewardsModal(false);
    setEditReward(null);
    setRewardForm({ reward_name: '', description: '', point_cost: 0 });
  }
  async function handleSaveReward(e) {
    e.preventDefault();
    setSavingReward(true);
    try {
      const method = editReward ? 'PUT' : 'POST';
      const url = editReward ? `/api/admin/rewards/${editReward.id}` : '/api/admin/rewards';
      const res = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(rewardForm),
      });
      if (!res.ok) throw new Error('Gagal menyimpan data.');
      closeRewardModal();
      // Refresh data
      const newData = await fetch('/api/admin/rewards').then(r => r.json());
      setRewards(newData);
    } catch {
      alert('Gagal menyimpan data hadiah.');
    }
    setSavingReward(false);
  }
  async function handleDeleteReward(id) {
    if (!confirm('Yakin ingin menghapus hadiah ini?')) return;
    await fetch(`/api/admin/rewards/${id}`, { method: 'DELETE' });
    setRewards(await fetch('/api/admin/rewards').then(r => r.json()));
  }

  // --- BADGES CRUD ---
  const [badges, setBadges] = useState([]);
  const [badgesLoading, setBadgesLoading] = useState(true);
  const [badgesError, setBadgesError] = useState(null);
  const [showBadgesModal, setShowBadgesModal] = useState(false);
  const [editBadge, setEditBadge] = useState(null);
  const [badgeForm, setBadgeForm] = useState({ 
    badge_name: '', 
    description: '', 
    criteria_type: 'manual', 
    criteria_value: 0 
  });
  const [savingBadge, setSavingBadge] = useState(false);

  useEffect(() => {
    if (!isBadges) return;
    setBadgesLoading(true);
    fetch('/api/admin/badges')
      .then(res => res.ok ? res.json() : Promise.reject(res))
      .then(setBadges)
      .catch(() => setBadgesError('Gagal memuat data lencana.'))
      .finally(() => setBadgesLoading(false));
  }, [isBadges]);

  function openAddBadgeModal() {
    setEditBadge(null);
    setBadgeForm({ 
      badge_name: '', 
      description: '', 
      criteria_type: 'manual', 
      criteria_value: 0 
    });
    setShowBadgesModal(true);
  }
  function openEditBadgeModal(item) {
    setEditBadge(item);
    setBadgeForm({ 
      badge_name: item.badge_name, 
      description: item.description,
      criteria_type: item.criteria_type,
      criteria_value: item.criteria_value
    });
    setShowBadgesModal(true);
  }
  function closeBadgeModal() {
    setShowBadgesModal(false);
    setEditBadge(null);
    setBadgeForm({ 
      badge_name: '', 
      description: '', 
      criteria_type: 'manual', 
      criteria_value: 0 
    });
  }
  async function handleSaveBadge(e) {
    e.preventDefault();
    setSavingBadge(true);
    try {
      const method = editBadge ? 'PUT' : 'POST';
      const url = editBadge ? `/api/admin/badges/${editBadge.id}` : '/api/admin/badges';
      const res = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(badgeForm),
      });
      if (!res.ok) throw new Error('Gagal menyimpan data.');
      closeBadgeModal();
      // Refresh data
      const newData = await fetch('/api/admin/badges').then(r => r.json());
      setBadges(newData);
    } catch {
      alert('Gagal menyimpan data lencana.');
    }
    setSavingBadge(false);
  }
  async function handleDeleteBadge(id) {
    if (!confirm('Yakin ingin menghapus lencana ini?')) return;
    await fetch(`/api/admin/badges/${id}`, { method: 'DELETE' });
    setBadges(await fetch('/api/admin/badges').then(r => r.json()));
  }

  // --- LEVELS CRUD ---
  const [levels, setLevels] = useState([]);
  const [levelsLoading, setLevelsLoading] = useState(true);
  const [levelsError, setLevelsError] = useState(null);
  const [showLevelsModal, setShowLevelsModal] = useState(false);
  const [editLevel, setEditLevel] = useState(null);
  const [levelForm, setLevelForm] = useState({ level_number: '', level_name: '', required_points: 0 });
  const [savingLevel, setSavingLevel] = useState(false);

  useEffect(() => {
    if (!isLevels) return;
    setLevelsLoading(true);
    fetch('/api/admin/levels')
      .then(res => res.ok ? res.json() : Promise.reject(res))
      .then(setLevels)
      .catch(() => setLevelsError('Gagal memuat data level.'))
      .finally(() => setLevelsLoading(false));
  }, [isLevels]);

  function openAddLevelModal() {
    setEditLevel(null);
    setLevelForm({ level_number: '', level_name: '', required_points: 0 });
    setShowLevelsModal(true);
  }
  function openEditLevelModal(item) {
    setEditLevel(item);
    setLevelForm({
      level_number: item.level_number,
      level_name: item.level_name,
      required_points: item.required_points
    });
    setShowLevelsModal(true);
  }
  function closeLevelModal() {
    setShowLevelsModal(false);
    setEditLevel(null);
    setLevelForm({ level_number: '', level_name: '', required_points: 0 });
  }
  async function handleSaveLevel(e) {
    e.preventDefault();
    setSavingLevel(true);
    try {
      const method = editLevel ? 'PUT' : 'POST';
      const url = editLevel ? `/api/admin/levels/${editLevel.level_number}` : '/api/admin/levels';
      const res = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(levelForm),
      });
      
      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || 'Gagal menyimpan data.');
      }
      
      closeLevelModal();
      // Refresh data
      const newData = await fetch('/api/admin/levels').then(r => r.json());
      setLevels(newData);
    } catch (error) {
      alert(error.message || 'Gagal menyimpan data level.');
    }
    setSavingLevel(false);
  }
  async function handleDeleteLevel(level_number) {
    if (!confirm('Yakin ingin menghapus level ini?')) return;
    try {
      const res = await fetch(`/api/admin/levels/${level_number}`, { method: 'DELETE' });
      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || 'Gagal menghapus level.');
      }
      setLevels(await fetch('/api/admin/levels').then(r => r.json()));
    } catch (error) {
      alert(error.message || 'Gagal menghapus level.');
    }
  }

  // --- TUGAS CRUD (lihat kode sebelumnya untuk tugas, tidak diubah di sini) ---

  // RENDER
  if (isRewards) {
    return (
      <div>
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-bold">Kelola Hadiah</h2>
          <button onClick={openAddRewardModal} className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">+ Tambah Hadiah</button>
        </div>

        {/* Rewards Management Section */}
        <div className="mb-8">
          <h3 className="text-lg font-semibold mb-4">Daftar Hadiah</h3>
          {rewardsLoading ? (
            <div className="text-center py-8">Memuat data hadiah...</div>
          ) : rewardsError ? (
            <div className="text-center text-red-500 py-8">{rewardsError}</div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full text-xs md:text-sm border">
                <thead className="bg-gray-100">
                  <tr>
                    <th className="px-2 py-1 border">ID</th>
                    <th className="px-2 py-1 border">Nama</th>
                    <th className="px-2 py-1 border">Deskripsi</th>
                    <th className="px-2 py-1 border">Poin Dibutuhkan</th>
                    <th className="px-2 py-1 border">Aksi</th>
                  </tr>
                </thead>
                <tbody>
                  {(rewards || []).map((item) => (
                    <tr key={item.id} className="even:bg-gray-50">
                      <td className="px-2 py-1 border text-center">{item.id}</td>
                      <td className="px-2 py-1 border">{item.reward_name}</td>
                      <td className="px-2 py-1 border">{item.description}</td>
                      <td className="px-2 py-1 border text-center">{item.point_cost}</td>
                      <td className="px-2 py-1 border text-center">
                        <div className="flex justify-center gap-2">
                          <button 
                            onClick={() => openEditRewardModal(item)} 
                            className="text-blue-600 hover:text-blue-800 p-1 rounded hover:bg-blue-50 transition-colors"
                            title="Edit"
                          >
                            <PencilIcon className="w-4 h-4" />
                          </button>
                          <button 
                            onClick={() => handleDeleteReward(item.id)} 
                            className="text-red-600 hover:text-red-800 p-1 rounded hover:bg-red-50 transition-colors"
                            title="Hapus"
                          >
                            <TrashIcon className="w-4 h-4" />
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
        
        {/* Verification Section */}
        <RedemptionVerificationSection />
        
        {/* History Section */}
        <RedemptionHistorySection />
        
        {/* Modal Reward */}
        {showRewardsModal && (
          <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
            <div className="bg-white rounded shadow-lg p-6 w-full max-w-md">
              <h3 className="font-bold text-lg mb-4">{editReward ? 'Edit Hadiah' : 'Tambah Hadiah'}</h3>
              <form onSubmit={handleSaveReward} className="space-y-3">
                <div>
                  <label className="block text-sm font-medium mb-1">Nama Hadiah</label>
                  <input type="text" className="w-full border rounded px-3 py-2" value={rewardForm.reward_name} onChange={e => setRewardForm(f => ({ ...f, reward_name: e.target.value }))} required />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Deskripsi</label>
                  <textarea className="w-full border rounded px-3 py-2" value={rewardForm.description} onChange={e => setRewardForm(f => ({ ...f, description: e.target.value }))} required />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Poin Dibutuhkan</label>
                  <input type="number" className="w-full border rounded px-3 py-2" value={rewardForm.point_cost} onChange={e => setRewardForm(f => ({ ...f, point_cost: Number(e.target.value) }))} required min={0} />
                </div>
                <div className="flex justify-end gap-2 mt-4">
                  <button type="button" onClick={closeRewardModal} className="px-4 py-2 rounded bg-gray-200 hover:bg-gray-300">Batal</button>
                  <button type="submit" disabled={savingReward} className="px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700">{savingReward ? 'Menyimpan...' : 'Simpan'}</button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    );
  }

  if (isBadges) {
    return (
      <div>
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold">Kelola Lencana</h2>
          <button onClick={openAddBadgeModal} className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">+ Tambah Lencana</button>
        </div>
        {badgesLoading ? (
          <div className="text-center py-8">Memuat data lencana...</div>
        ) : badgesError ? (
          <div className="text-center text-red-500 py-8">{badgesError}</div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full text-xs md:text-sm border">
              <thead className="bg-gray-100">
                <tr>
                  <th className="px-2 py-1 border">ID</th>
                  <th className="px-2 py-1 border">Nama Lencana</th>
                  <th className="px-2 py-1 border">Deskripsi</th>
                  <th className="px-2 py-1 border">Tipe Kriteria</th>
                  <th className="px-2 py-1 border">Nilai Kriteria</th>
                  <th className="px-2 py-1 border">Aksi</th>
                </tr>
              </thead>
              <tbody>
                {(badges || []).map((item) => (
                    <tr key={item.id} className="even:bg-gray-50">
                      <td className="px-2 py-1 border text-center">{item.id}</td>
                      <td className="px-2 py-1 border">{item.badge_name}</td>
                      <td className="px-2 py-1 border">{item.description}</td>
                      <td className="px-2 py-1 border text-center">
                        <span className={`px-2 py-1 rounded text-xs ${
                          item.criteria_type === 'manual' ? 'bg-gray-100 text-gray-800' :
                          item.criteria_type === 'loyalty_points' ? 'bg-blue-100 text-blue-800' :
                          item.criteria_type === 'tasks_completed' ? 'bg-green-100 text-green-800' :
                          item.criteria_type === 'comments_count' ? 'bg-purple-100 text-purple-800' :
                          'bg-gray-200 text-gray-800'
                        }`}>
                          {item.criteria_type || 'manual'}
                        </span>
                      </td>
                      <td className="px-2 py-1 border text-center">{item.criteria_value || 0}</td>
                      <td className="px-2 py-1 border text-center">
                        <div className="flex justify-center gap-2">
                          <button 
                            onClick={() => openEditBadgeModal(item)} 
                            className="text-blue-600 hover:text-blue-800 p-1 rounded hover:bg-blue-50 transition-colors"
                            title="Edit"
                          >
                            <PencilIcon className="w-4 h-4" />
                          </button>
                          <button 
                            onClick={() => handleDeleteBadge(item.id)} 
                            className="text-red-600 hover:text-red-800 p-1 rounded hover:bg-red-50 transition-colors"
                            title="Hapus"
                          >
                            <TrashIcon className="w-4 h-4" />
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
            </table>
          </div>
        )}
        {/* Modal Badge */}
        {showBadgesModal && (
          <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
            <div className="bg-white rounded shadow-lg p-6 w-full max-w-md">
              <h3 className="font-bold text-lg mb-4">{editBadge ? 'Edit Lencana' : 'Tambah Lencana'}</h3>
              <form onSubmit={handleSaveBadge} className="space-y-3">
                <div>
                  <label className="block text-sm font-medium mb-1">Nama Lencana</label>
                  <input type="text" className="w-full border rounded px-3 py-2" value={badgeForm.badge_name} onChange={e => setBadgeForm(f => ({ ...f, badge_name: e.target.value }))} required />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Deskripsi</label>
                  <textarea className="w-full border rounded px-3 py-2" value={badgeForm.description} onChange={e => setBadgeForm(f => ({ ...f, description: e.target.value }))} required />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Tipe Kriteria (Opsional)</label>
                  <select 
                    className="w-full border rounded px-3 py-2" 
                    value={badgeForm.criteria_type} 
                    onChange={e => setBadgeForm(f => ({ ...f, criteria_type: e.target.value }))}
                  >
                    <option value="manual">Manual (Diberikan Admin)</option>
                    <option value="loyalty_points">Berdasarkan Loyalty Points</option>
                    <option value="tasks_completed">Berdasarkan Tugas Diselesaikan</option>
                    <option value="comments_count">Berdasarkan Jumlah Komentar</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Nilai Kriteria (Opsional)</label>
                  <input 
                    type="number" 
                    className="w-full border rounded px-3 py-2" 
                    value={badgeForm.criteria_value} 
                    onChange={e => setBadgeForm(f => ({ ...f, criteria_value: Number(e.target.value) || 0 }))}
                    min={0}
                    placeholder="0"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    {badgeForm.criteria_type === 'manual' && 'Untuk badge manual, kosongkan atau isi 0'}
                    {badgeForm.criteria_type === 'loyalty_points' && 'Minimal loyalty points yang dibutuhkan'}
                    {badgeForm.criteria_type === 'tasks_completed' && 'Minimal tugas yang harus diselesaikan'}
                    {badgeForm.criteria_type === 'comments_count' && 'Minimal jumlah komentar yang dibutuhkan'}
                  </p>
                </div>
                <div className="flex justify-end gap-2 mt-4">
                  <button type="button" onClick={closeBadgeModal} className="px-4 py-2 rounded bg-gray-200 hover:bg-gray-300">Batal</button>
                  <button type="submit" disabled={savingBadge} className="px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700">{savingBadge ? 'Menyimpan...' : 'Simpan'}</button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    );
  }

  if (isLevels) {
    return (
      <div>
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold">Kelola Level</h2>
          <button onClick={openAddLevelModal} className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">+ Tambah Level</button>
        </div>
        {levelsLoading ? (
          <div className="text-center py-8">Memuat data level...</div>
        ) : levelsError ? (
          <div className="text-center text-red-500 py-8">{levelsError}</div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full text-xs md:text-sm border">
              <thead className="bg-gray-100">
                <tr>
                  <th className="px-2 py-1 border">ID</th>
                  <th className="px-2 py-1 border">Level</th>
                  <th className="px-2 py-1 border">Nama Level</th>
                  <th className="px-2 py-1 border">Poin Dibutuhkan</th>
                  <th className="px-2 py-1 border">Aksi</th>
                </tr>
              </thead>
              <tbody>
                {(levels || []).map((item) => (
                  <tr key={item.level_number} className="even:bg-gray-50">
                    <td className="px-2 py-1 border text-center">{item.level_number}</td>
                    <td className="px-2 py-1 border text-center">{item.level_number}</td>
                    <td className="px-2 py-1 border">{item.level_name}</td>
                    <td className="px-2 py-1 border text-center">{item.required_points}</td>
                    <td className="px-2 py-1 border text-center">
                      <div className="flex justify-center gap-2">
                        <button 
                          onClick={() => openEditLevelModal(item)} 
                          className="text-blue-600 hover:text-blue-800 p-1 rounded hover:bg-blue-50 transition-colors"
                          title="Edit"
                        >
                          <PencilIcon className="w-4 h-4" />
                        </button>
                        <button 
                          onClick={() => handleDeleteLevel(item.level_number)} 
                          className="text-red-600 hover:text-red-800 p-1 rounded hover:bg-red-50 transition-colors"
                          title="Hapus"
                        >
                          <TrashIcon className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
        {/* Modal Level */}
        {showLevelsModal && (
          <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
            <div className="bg-white rounded shadow-lg p-6 w-full max-w-md">
              <h3 className="font-bold text-lg mb-4">{editLevel ? 'Edit Level' : 'Tambah Level'}</h3>
              <form onSubmit={handleSaveLevel} className="space-y-3">
                <div>
                  <label className="block text-sm font-medium mb-1">Nomor Level</label>
                  <input type="number" className="w-full border rounded px-3 py-2" value={levelForm.level_number} onChange={e => setLevelForm(f => ({ ...f, level_number: Number(e.target.value) }))} required min={1} />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Nama Level</label>
                  <input type="text" className="w-full border rounded px-3 py-2" value={levelForm.level_name} onChange={e => setLevelForm(f => ({ ...f, level_name: e.target.value }))} required />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Poin Dibutuhkan</label>
                  <input type="number" className="w-full border rounded px-3 py-2" value={levelForm.required_points} onChange={e => setLevelForm(f => ({ ...f, required_points: Number(e.target.value) }))} required min={0} />
                </div>
                <div className="flex justify-end gap-2 mt-4">
                  <button type="button" onClick={closeLevelModal} className="px-4 py-2 rounded bg-gray-200 hover:bg-gray-300">Batal</button>
                  <button type="submit" disabled={savingLevel} className="px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700">{savingLevel ? 'Menyimpan...' : 'Simpan'}</button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    );
  }

  // --- TUGAS CRUD ---
  const [tasks, setTasks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [editItem, setEditItem] = useState(null);
  const [form, setForm] = useState({ deskripsi_tugas: '', keyword_tugas: '', status: 'aktif', point_value: 0 });
  const [saving, setSaving] = useState(false);
  const [page, setPage] = useState(1);
  const [total, setTotal] = useState(0);
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredTasks, setFilteredTasks] = useState([]);
  const limit = 20;

  useEffect(() => {
    if (!isTugas) return;
    setLoading(true);
    setSearchTerm(''); // Reset search when switching to this tab
    fetch(`/api/admin/tugas?page=${page}&limit=${limit}`)
      .then(res => res.ok ? res.json() : Promise.reject(res))
      .then(res => {
        setTasks(res.tasks);
        setTotal(res.total);
      })
      .catch(() => setError('Gagal memuat data tugas.'))
      .finally(() => setLoading(false));
  }, [isTugas, page]);

  // Filter tasks based on search term
  useEffect(() => {
    if (!searchTerm.trim()) {
      setFilteredTasks(tasks);
    } else {
      const filtered = tasks.filter(task => 
        (task.deskripsi_tugas && task.deskripsi_tugas.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (task.keyword_tugas && task.keyword_tugas.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (task.status && task.status.toLowerCase().includes(searchTerm.toLowerCase()))
      );
      setFilteredTasks(filtered);
    }
  }, [tasks, searchTerm]);

  function openEditModal(item) {
    setEditItem(item);
    setForm({
      deskripsi_tugas: item.deskripsi_tugas,
      keyword_tugas: item.keyword_tugas,
      status: item.status,
      point_value: item.point_value
    });
    setShowModal(true);
  }
  function closeModal() {
    setShowModal(false);
    setEditItem(null);
    setForm({ deskripsi_tugas: '', keyword_tugas: '', status: 'aktif', point_value: 0 });
  }

  async function handleSave(e) {
    e.preventDefault();
    setSaving(true);
    try {
      const url = `/api/admin/tugas/${editItem.id}`;
      const res = await fetch(url, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(form),
      });
      if (!res.ok) throw new Error('Gagal menyimpan data.');
      closeModal();
      // Refresh data
      const refreshed = await fetch(`/api/admin/tugas?page=${page}&limit=${limit}`).then(r => r.json());
      setTasks(refreshed.tasks);
      setTotal(refreshed.total);
    } catch {
      alert('Gagal menyimpan data tugas.');
    }
    setSaving(false);
  }

  if (!isTugas) {
    return <div className="text-gray-500">CRUD for {resource} coming soon...</div>;
  }

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-bold">Kelola Tugas</h2>
      </div>
      
      {/* Search Box */}
      <div className="mb-4">
        <div className="relative">
          <input
            type="text"
            placeholder="Cari tugas berdasarkan deskripsi, keyword, atau status..."
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <div className="absolute inset-y-0 right-0 flex items-center pr-3">
            <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
        </div>
        {searchTerm && (
          <div className="mt-2 text-sm text-gray-600">
            Menampilkan {filteredTasks.length} dari {tasks.length} tugas
          </div>
        )}
      </div>

      {loading ? (
        <div className="text-center py-8">Memuat data tugas...</div>
      ) : error ? (
        <div className="text-center text-red-500 py-8">{error}</div>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full text-xs md:text-sm border">
            <thead className="bg-gray-100">
              <tr>
                <th className="px-2 py-1 border">ID</th>
                <th className="px-2 py-1 border">Deskripsi Tugas</th>
                <th className="px-2 py-1 border">Keyword</th>
                <th className="px-2 py-1 border">Status</th>
                <th className="px-2 py-1 border">Poin</th>
                <th className="px-2 py-1 border">Aksi</th>
              </tr>
            </thead>
            <tbody>
              {(filteredTasks || []).map((item) => (
                <tr key={item.id} className="even:bg-gray-50">
                  <td className="px-2 py-1 border text-center">{item.id}</td>
                  <td className="px-2 py-1 border">{item.deskripsi_tugas}</td>
                  <td className="px-2 py-1 border">{item.keyword_tugas}</td>
                  <td className="px-2 py-1 border text-center">{item.status}</td>
                  <td className="px-2 py-1 border text-center">{item.point_value}</td>
                  <td className="px-2 py-1 border text-center">
                    <div className="flex justify-center gap-2">
                      <button 
                        onClick={() => openEditModal(item)} 
                        className="text-blue-600 hover:text-blue-800 p-1 rounded hover:bg-blue-50 transition-colors"
                        title="Edit"
                      >
                        <PencilIcon className="w-4 h-4" />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
              {filteredTasks.length === 0 && searchTerm && (
                <tr>
                  <td colSpan="6" className="px-4 py-8 text-center text-gray-500">
                    Tidak ada tugas yang cocok dengan pencarian "{searchTerm}"
                  </td>
                </tr>
              )}
              {filteredTasks.length === 0 && !searchTerm && tasks.length === 0 && (
                <tr>
                  <td colSpan="6" className="px-4 py-8 text-center text-gray-500">
                    Belum ada data tugas
                  </td>
                </tr>
              )}
            </tbody>
          </table>
          {/* Pagination */}
          <div className="flex justify-between items-center mt-4">
            <span className="text-xs text-gray-500">Total: {total}</span>
            <div className="flex gap-2">
              <button disabled={page === 1} onClick={() => setPage(p => Math.max(1, p - 1))} className="px-2 py-1 rounded bg-gray-200 disabled:opacity-50">Prev</button>
              <span className="text-xs">Halaman {page}</span>
              <button disabled={page * limit >= total} onClick={() => setPage(p => p + 1)} className="px-2 py-1 rounded bg-gray-200 disabled:opacity-50">Next</button>
            </div>
          </div>
        </div>
      )}
      {/* Modal Edit */}
      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
          <div className="bg-white rounded shadow-lg p-6 w-full max-w-md">
            <h3 className="font-bold text-lg mb-4">Edit Tugas</h3>
            <form onSubmit={handleSave} className="space-y-3">
              <div>
                <label className="block text-sm font-medium mb-1">Deskripsi Tugas</label>
                <input type="text" className="w-full border rounded px-3 py-2" value={form.deskripsi_tugas} onChange={e => setForm(f => ({ ...f, deskripsi_tugas: e.target.value }))} required />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Keyword</label>
                <input type="text" className="w-full border rounded px-3 py-2" value={form.keyword_tugas} onChange={e => setForm(f => ({ ...f, keyword_tugas: e.target.value }))} required />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Status</label>
                <select className="w-full border rounded px-3 py-2" value={form.status} onChange={e => setForm(f => ({ ...f, status: e.target.value }))}>
                  <option key="aktif" value="aktif">Aktif</option>
                  <option key="tidak-aktif" value="tidak aktif">Tidak Aktif</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Poin</label>
                <input type="number" className="w-full border rounded px-3 py-2" value={form.point_value} onChange={e => setForm(f => ({ ...f, point_value: Number(e.target.value) }))} required min={0} />
              </div>
              <div className="flex justify-end gap-2 mt-4">
                <button type="button" onClick={closeModal} className="px-4 py-2 rounded bg-gray-200 hover:bg-gray-300">Batal</button>
                <button type="submit" disabled={saving} className="px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700">{saving ? 'Menyimpan...' : 'Simpan'}</button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

// --- Privileges Tab ---
function PrivilegesTab() {
  const [privileges, setPrivileges] = useState([]);
  const [members, setMembers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [editPrivilege, setEditPrivilege] = useState(null);
  const [form, setForm] = useState({ 
    clerk_id: '', 
    privilege: 'user', 
    is_active: true 
  });
  const [saving, setSaving] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredPrivileges, setFilteredPrivileges] = useState([]);

  // Load data
  useEffect(() => {
    setLoading(true);
    // Only fetch privileges - members data will be included
    fetch('/api/admin/privileges')
      .then(r => r.ok ? r.json() : Promise.reject(r))
      .then((privilegesData) => {
        setPrivileges(privilegesData);
        // Still fetch members for dropdown in modal
        return fetch('/api/members').then(r => r.ok ? r.json() : []);
      })
      .then((membersData) => {
        setMembers(membersData || []);
      })
      .catch(() => setError('Gagal memuat data hak akses.'))
      .finally(() => setLoading(false));
  }, []);

  // Filter privileges based on search
  useEffect(() => {
    if (!Array.isArray(privileges)) {
      setFilteredPrivileges([]);
      return;
    }

    if (!searchTerm.trim()) {
      setFilteredPrivileges(privileges);
    } else {
      const filtered = privileges.filter(priv => {
        const memberInfo = getMemberInfo(priv);
        
        return (
          memberInfo.nama_lengkap.toLowerCase().includes(searchTerm.toLowerCase()) ||
          memberInfo.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
          memberInfo.nomer_wa.toLowerCase().includes(searchTerm.toLowerCase()) ||
          priv.privilege.toLowerCase().includes(searchTerm.toLowerCase()) ||
          (priv.clerkid && priv.clerkid.toLowerCase().includes(searchTerm.toLowerCase())) ||
          (priv.user_email && priv.user_email.toLowerCase().includes(searchTerm.toLowerCase()))
        );
      });
      setFilteredPrivileges(filtered);
    }
  }, [privileges, members, searchTerm]);

  function openAddModal() {
    setEditPrivilege(null);
    setForm({ clerkid: '', privilege: 'member', is_active: true });
    setShowModal(true);
  }

  function openEditModal(item) {
    setEditPrivilege(item);
    setForm({
      clerkid: item.clerkid,
      privilege: item.privilege,
      is_active: item.is_active
    });
    setShowModal(true);
  }

  function closeModal() {
    setShowModal(false);
    setEditPrivilege(null);
    setForm({ clerkid: '', privilege: 'member', is_active: true });
  }

  async function handleSave(e) {
    e.preventDefault();
    setSaving(true);
    try {
      const method = editPrivilege ? 'PUT' : 'POST';
      const url = editPrivilege ? `/api/admin/privileges/${editPrivilege.id}` : '/api/admin/privileges';
      
      const res = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(form),
      });
      
      if (!res.ok) throw new Error('Gagal menyimpan data.');
      
      closeModal();
      
      // Refresh privileges data
      const refreshed = await fetch('/api/admin/privileges').then(r => r.json());
      setPrivileges(refreshed);
    } catch {
      alert('Gagal menyimpan data hak akses.');
    }
    setSaving(false);
  }

  async function handleDelete(id) {
    if (!confirm('Yakin ingin menghapus hak akses ini?')) return;
    
    try {
      const res = await fetch(`/api/admin/privileges/${id}`, { method: 'DELETE' });
      if (!res.ok) throw new Error('Gagal menghapus data.');
      
      // Refresh data
      const refreshed = await fetch('/api/admin/privileges').then(r => r.json());
      setPrivileges(refreshed);
    } catch {
      alert('Gagal menghapus data hak akses.');
    }
  }

  function getMemberInfo(privilegeItem) {
    // First try to get from included member data (email-based relation)
    if (privilegeItem.members) {
      return {
        nama_lengkap: privilegeItem.members.nama_lengkap || 'Tidak ada nama',
        email: getMemberEmail(privilegeItem.members) || 'Tidak ada email',
        nomer_wa: privilegeItem.members.nomer_wa || 'Tidak ada WA'
      };
    }
    
    // Second try clerk-based relation
    if (privilegeItem.members_user_privileges_clerkidTomembers) {
      const member = privilegeItem.members_user_privileges_clerkidTomembers;
      return {
        nama_lengkap: member.nama_lengkap || 'Tidak ada nama',
        email: getMemberEmail(member) || 'Tidak ada email',
        nomer_wa: member.nomer_wa || 'Tidak ada WA'
      };
    }
    
    // Fallback: try to find in members array (for dropdown)
    if (Array.isArray(members)) {
      const member = members.find(m => m.clerk_id === privilegeItem.clerk_id || getMemberEmail(m) === privilegeItem.user_email);
      if (member) {
        return {
          nama_lengkap: member.nama_lengkap || 'Tidak ada nama',
          email: getMemberEmail(member) || 'Tidak ada email',
          nomer_wa: member.nomer_wa || 'Tidak ada WA'
        };
      }
    }
    
    // Final fallback: use email from privilege record
    return { 
      nama_lengkap: privilegeItem.user_email || 'Data tidak lengkap',
      email: privilegeItem.user_email || 'Tidak ada email', 
      nomer_wa: 'Tidak ada WA' 
    };
  }

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-bold">Kelola Hak Akses</h2>
        <button 
          onClick={openAddModal}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          Tambah Hak Akses
        </button>
      </div>

      {/* Search Box */}
      <div className="mb-4">
        <div className="relative">
          <input
            type="text"
            placeholder="Cari berdasarkan nama lengkap, email, nomor WA, atau privilege..."
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <div className="absolute inset-y-0 right-0 flex items-center pr-3">
            <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
        </div>
        {searchTerm && (
          <div className="mt-2 text-sm text-gray-600">
            Menampilkan {filteredPrivileges.length} dari {privileges.length} hak akses
          </div>
        )}
      </div>

      {loading ? (
        <div className="text-center py-8">Memuat data hak akses...</div>
      ) : error ? (
        <div className="text-center text-red-500 py-8">{error}</div>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full text-xs md:text-sm border">
            <thead className="bg-gray-100">
              <tr>
                <th className="px-2 py-1 border">ID</th>
                <th className="px-2 py-1 border">Nama Lengkap</th>
                <th className="px-2 py-1 border">Email</th>
                <th className="px-2 py-1 border">WA</th>
                <th className="px-2 py-1 border">Privilege</th>
                <th className="px-2 py-1 border">Status</th>
                <th className="px-2 py-1 border">Aksi</th>
              </tr>
            </thead>
            <tbody>
              {(filteredPrivileges || []).map((item) => {
                const memberInfo = getMemberInfo(item);
                return (
                  <tr key={item.id} className="even:bg-gray-50">
                    <td className="px-2 py-1 border text-center">{item.id}</td>
                    <td className="px-2 py-1 border">{memberInfo.nama_lengkap}</td>
                    <td className="px-2 py-1 border text-xs">{memberInfo.email}</td>
                    <td className="px-2 py-1 border text-xs">{memberInfo.nomer_wa}</td>
                    <td className="px-2 py-1 border text-center">
                      <span className={`px-2 py-1 rounded text-xs ${
                        item.privilege === 'admin' ? 'bg-red-100 text-red-800' :
                        item.privilege === 'partner' ? 'bg-blue-100 text-blue-800' :
                        'bg-green-100 text-green-800' // Default untuk 'user'
                      }`}>
                        {item.privilege}
                      </span>
                    </td>
                    <td className="px-2 py-1 border text-center">
                      <span className={`px-2 py-1 rounded text-xs ${
                        item.is_active ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                      }`}>
                        {item.is_active ? 'Aktif' : 'Nonaktif'}
                      </span>
                    </td>
                    <td className="px-2 py-1 border text-center">
                      <div className="flex justify-center gap-2">
                        <button 
                          onClick={() => openEditModal(item)} 
                          className="text-blue-600 hover:text-blue-800 p-1 rounded hover:bg-blue-50 transition-colors"
                          title="Edit"
                        >
                          <PencilIcon className="w-4 h-4" />
                        </button>
                        <button 
                          onClick={() => handleDelete(item.id)} 
                          className="text-red-600 hover:text-red-800 p-1 rounded hover:bg-red-50 transition-colors"
                          title="Hapus"
                        >
                          <TrashIcon className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                );
              })}
              {filteredPrivileges.length === 0 && searchTerm && (
                <tr>
                  <td colSpan="7" className="px-4 py-8 text-center text-gray-500">
                    Tidak ada hak akses yang cocok dengan pencarian "{searchTerm}"
                  </td>
                </tr>
              )}
              {filteredPrivileges.length === 0 && !searchTerm && privileges.length === 0 && (
                <tr>
                  <td colSpan="7" className="px-4 py-8 text-center text-gray-500">
                    Belum ada data hak akses
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      )}

      {/* Modal Add/Edit */}
      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
          <div className="bg-white rounded shadow-lg p-6 w-full max-w-md">
            <h3 className="font-bold text-lg mb-4">
              {editPrivilege ? 'Edit Hak Akses' : 'Tambah Hak Akses'}
            </h3>
            <form onSubmit={handleSave} className="space-y-3">
              <div>
                <label className="block text-sm font-medium mb-1">Member</label>
                <select 
                  className="w-full border rounded px-3 py-2" 
                  value={form.clerkid} 
                  onChange={e => setForm(f => ({ ...f, clerkid: e.target.value }))}
                  required
                  disabled={editPrivilege} // Disable when editing
                >
                  <option value="">Pilih Member</option>
                  {Array.isArray(members) && members.map(member => (
                    <option key={member.clerkId} value={member.clerkId}>
                      {member.nama_lengkap || member.email} ({member.email})
                    </option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Privilege</label>
                <select 
                  className="w-full border rounded px-3 py-2" 
                  value={form.privilege} 
                  onChange={e => setForm(f => ({ ...f, privilege: e.target.value }))}
                >
                  <option key="user" value="user">User</option>
                  <option key="partner" value="partner">Partner</option>
                  <option key="admin" value="admin">Admin</option>
                </select>
              </div>
              <div>
                <label className="flex items-center">
                  <input 
                    type="checkbox" 
                    checked={form.is_active} 
                    onChange={e => setForm(f => ({ ...f, is_active: e.target.checked }))}
                    className="mr-2"
                  />
                  <span className="text-sm">Aktif</span>
                </label>
              </div>
              <div className="flex justify-end gap-2 mt-4">
                <button 
                  type="button" 
                  onClick={closeModal} 
                  className="px-4 py-2 rounded bg-gray-200 hover:bg-gray-300"
                >
                  Batal
                </button>
                <button 
                  type="submit" 
                  disabled={saving} 
                  className="px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50"
                >
                  {saving ? 'Menyimpan...' : 'Simpan'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

// --- Badges Management Tab ---
function BadgesManagementTab() {
  // Badge CRUD States (existing functionality)
  const [badges, setBadges] = useState([]);
  const [badgesLoading, setBadgesLoading] = useState(true);
  const [badgesError, setBadgesError] = useState(null);
  const [showBadgesModal, setShowBadgesModal] = useState(false);
  const [editBadge, setEditBadge] = useState(null);
  const [badgeForm, setBadgeForm] = useState({ 
    badge_name: '', 
    description: '', 
    criteria_type: 'manual', 
    criteria_value: 0 
  });
  const [savingBadge, setSavingBadge] = useState(false);

  // Member Badges States (new functionality)
  const [memberBadges, setMemberBadges] = useState([]);
  const [members, setMembers] = useState([]);
  const [memberBadgesLoading, setMemberBadgesLoading] = useState(true);
  const [showAssignModal, setShowAssignModal] = useState(false);
  const [assignForm, setAssignForm] = useState({ id_member: '', id_badge: '' });
  const [savingAssign, setSavingAssign] = useState(false);
  const [searchMember, setSearchMember] = useState('');
  const [activeSection, setActiveSection] = useState('badges'); // 'badges' or 'assignments'

  // New state for bulk assignment
  const [selectedBadgeForBulkAssign, setSelectedBadgeForBulkAssign] = useState('');
  const [selectedMemberIds, setSelectedMemberIds] = useState(new Set());
  const [bulkAssignSaving, setBulkAssignSaving] = useState(false);

  // Load data
  useEffect(() => {
    loadBadges();
    loadMemberBadges();
    loadMembers();
  }, []);

  async function loadBadges() {
    setBadgesLoading(true);
    try {
      const res = await fetch('/api/admin/badges');
      if (res.ok) {
        const data = await res.json();
        setBadges(data);
      } else {
        setBadgesError('Gagal memuat data lencana.');
      }
    } catch {
      setBadgesError('Gagal memuat data lencana.');
    }
    setBadgesLoading(false);
  }

  async function loadMemberBadges() {
    setMemberBadgesLoading(true);
    try {
      const res = await fetch('/api/admin/member-badges');
      if (res.ok) {
        const data = await res.json();
        setMemberBadges(data);
      }
    } catch (error) {
      console.error('Failed to load member badges:', error);
    }
    setMemberBadgesLoading(false);
  }

  async function loadMembers() {
    try {
      const res = await fetch('/api/members');
      if (res.ok) {
        const response = await res.json();
        const data = response.data || response; // Handle both formats
        setMembers(Array.isArray(data) ? data : []);
      }
    } catch (error) {
      console.error('Failed to load members:', error);
    }
  }

  // Badge CRUD Functions (existing)
  function openAddBadgeModal() {
    setEditBadge(null);
    setBadgeForm({ 
      badge_name: '', 
      description: '', 
      criteria_type: 'manual', 
      criteria_value: 0 
    });
    setShowBadgesModal(true);
  }

  function openEditBadgeModal(item) {
    setEditBadge(item);
    setBadgeForm({ 
      badge_name: item.badge_name, 
      description: item.description,
      criteria_type: item.criteria_type,
      criteria_value: item.criteria_value
    });
    setShowBadgesModal(true);
  }

  function closeBadgeModal() {
    setShowBadgesModal(false);
    setEditBadge(null);
    setBadgeForm({ 
      badge_name: '', 
      description: '', 
      criteria_type: 'manual', 
      criteria_value: 0 
    });
  }

  async function handleSaveBadge(e) {
    e.preventDefault();
    setSavingBadge(true);
    try {
      const method = editBadge ? 'PUT' : 'POST';
      const url = editBadge ? `/api/admin/badges/${editBadge.id}` : '/api/admin/badges';
      const res = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(badgeForm),
      });
      if (!res.ok) throw new Error('Gagal menyimpan data.');
      closeBadgeModal();
      loadBadges();
    } catch {
      alert('Gagal menyimpan data lencana.');
    }
    setSavingBadge(false);
  }

  async function handleDeleteBadge(id) {
    if (!confirm('Yakin ingin menghapus lencana ini?')) return;
    try {
      const res = await fetch(`/api/admin/badges/${id}`, { method: 'DELETE' });
      if (!res.ok) throw new Error('Gagal menghapus data.');
      loadBadges();
    } catch {
      alert('Gagal menghapus data lencana.');
    }
  }

  // Member Badge Assignment Functions (new)
  function openAssignModal() {
    setAssignForm({ id_member: '', id_badge: '' });
    setShowAssignModal(true);
  }

  function closeAssignModal() {
    setShowAssignModal(false);
    setAssignForm({ id_member: '', id_badge: '' });
  }

  async function handleAssignBadge(e) {
    e.preventDefault();
    setSavingAssign(true);
    try {
      const res = await fetch('/api/admin/member-badges', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(assignForm),
      });
      
      if (!res.ok) {
        const error = await res.json();
        throw new Error(error.error || 'Gagal memberikan lencana.');
      }
      
      closeAssignModal();
      loadMemberBadges();
      alert('Lencana berhasil diberikan!');
    } catch (error) {
      alert(error.message);
    } finally {
      setSavingAssign(false);
    }
  }

  async function handleRemoveBadge(memberBadgeId) {
    if (!confirm('Yakin ingin mencabut lencana ini?')) return;
    try {
      const res = await fetch(`/api/admin/member-badges/${memberBadgeId}`, { method: 'DELETE' });
      if (!res.ok) throw new Error('Gagal mencabut lencana.');
      loadMemberBadges();
      alert('Lencana berhasil dicabut!');
    } catch {
      alert('Gagal mencabut lencana.');
    }
  }

  // --- Bulk Badge Assignment ---
  function handleMemberSelection(memberId) {
    setSelectedMemberIds(prev => {
      const newSet = new Set(prev);
      if (newSet.has(memberId)) {
        newSet.delete(memberId);
      } else {
        newSet.add(memberId);
      }
      return newSet;
    });
  }

  async function handleBulkAssign() {
    if (!selectedBadgeForBulkAssign) {
      alert('Pilih lencana terlebih dahulu.');
      return;
    }
    if (selectedMemberIds.size === 0) {
      alert('Pilih minimal satu member.');
      return;
    }

    setBulkAssignSaving(true);
    try {
      const promises = Array.from(selectedMemberIds).map(memberId =>
        fetch('/api/admin/member-badges', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id_member: memberId, id_badge: selectedBadgeForBulkAssign }),
        }).then(res => res.json())
      );
      
      await Promise.all(promises);
      
      alert(`Lencana berhasil diberikan kepada ${selectedMemberIds.size} member.`);
      loadMemberBadges();
      setSelectedMemberIds(new Set());
      setSelectedBadgeForBulkAssign('');
    } catch (error) {
      alert('Terjadi kesalahan saat memberikan lencana massal.');
    }
    setBulkAssignSaving(false);
  }

  // Filter member badges based on search
  const filteredMemberBadges = memberBadges.filter(mb => {
    if (!searchMember) return true;
    const memberName = mb.members?.nama_lengkap || getMemberEmail(mb.members) || '';
    const badgeName = mb.badges?.badge_name || '';
    return memberName.toLowerCase().includes(searchMember.toLowerCase()) ||
           badgeName.toLowerCase().includes(searchMember.toLowerCase());
  });

  // Group member badges by member
  const memberBadgeGroups = filteredMemberBadges.reduce((acc, mb) => {
    const memberId = mb.members?.id;
    if (!acc[memberId]) {
      acc[memberId] = {
        member: mb.members,
        badges: []
      };
    }
    acc[memberId].badges.push(mb);
    return acc;
  }, {});

  return (
    <div>
      {/* Section Toggle */}
      <div className="flex bg-gray-100 rounded-lg p-1">
        <button
          onClick={() => setActiveSection('badges')}
          className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
            activeSection === 'badges' ? 'bg-white text-blue-600 shadow-sm' : 'text-gray-600 hover:text-gray-900'
          }`}
        >
          Kelola Lencana
        </button>
        <button
          onClick={() => setActiveSection('assignments')}
          className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
            activeSection === 'assignments' ? 'bg-white text-blue-600 shadow-sm' : 'text-gray-600 hover:text-gray-900'
          }`}
        >
          Pemberian Lencana (Individual)
        </button>
        <button
          onClick={() => setActiveSection('bulk_assign')}
          className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
            activeSection === 'bulk_assign' ? 'bg-white text-blue-600 shadow-sm' : 'text-gray-600 hover:text-gray-900'
          }`}
        >
          Pemberian Lencana (Massal)
        </button>
      </div>
      {/* Badge CRUD Section */}
      {activeSection === 'badges' && (
        <div>
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold">Kelola Lencana</h2>
            <button onClick={openAddBadgeModal} className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
              Tambah Lencana
            </button>
          </div>

          {badgesLoading ? (
            <div className="text-center py-8">Memuat data lencana...</div>
          ) : badgesError ? (
            <div className="text-red-600 text-center py-8">{badgesError}</div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full text-xs md:text-sm border">
                <thead className="bg-gray-100">
                  <tr>
                    <th className="px-2 py-1 border">ID</th>
                    <th className="px-2 py-1 border">Nama Lencana</th>
                    <th className="px-2 py-1 border">Deskripsi</th>
                    <th className="px-2 py-1 border">Tipe Kriteria</th>
                    <th className="px-2 py-1 border">Nilai Kriteria</th>
                    <th className="px-2 py-1 border">Aksi</th>
                  </tr>
                </thead>
                <tbody>
                  {(badges || []).map((item) => (
                    <tr key={item.id} className="even:bg-gray-50">
                      <td className="px-2 py-1 border text-center">{item.id}</td>
                      <td className="px-2 py-1 border">{item.badge_name}</td>
                      <td className="px-2 py-1 border">{item.description}</td>
                      <td className="px-2 py-1 border text-center">
                        <span className={`px-2 py-1 rounded text-xs ${
                          item.criteria_type === 'manual' ? 'bg-gray-100 text-gray-800' :
                          item.criteria_type === 'loyalty_points' ? 'bg-blue-100 text-blue-800' :
                          item.criteria_type === 'tasks_completed' ? 'bg-green-100 text-green-800' :
                          item.criteria_type === 'comments_count' ? 'bg-purple-100 text-purple-800' :
                          'bg-gray-200 text-gray-800'
                        }`}>
                          {item.criteria_type || 'manual'}
                        </span>
                      </td>
                      <td className="px-2 py-1 border text-center">{item.criteria_value || 0}</td>
                      <td className="px-2 py-1 border text-center">
                        <div className="flex justify-center gap-2">
                          <button 
                            onClick={() => openEditBadgeModal(item)} 
                            className="text-blue-600 hover:text-blue-800 p-1 rounded hover:bg-blue-50 transition-colors"
                            title="Edit"
                          >
                            <PencilIcon className="w-4 h-4" />
                          </button>
                          <button 
                            onClick={() => handleDeleteBadge(item.id)} 
                            className="text-red-600 hover:text-red-800 p-1 rounded hover:bg-red-50 transition-colors"
                            title="Hapus"
                          >
                            <TrashIcon className="w-4 h-4" />
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        {showBadgesModal && (
          <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
            <div className="bg-white rounded shadow-lg p-6 w-full max-w-md">
              <h3 className="font-bold text-lg mb-4">{editBadge ? 'Edit Lencana' : 'Tambah Lencana'}</h3>
              <form onSubmit={handleSaveBadge} className="space-y-3">
                <div>
                  <label className="block text-sm font-medium mb-1">Nama Lencana</label>
                  <input type="text" className="w-full border rounded px-3 py-2" value={badgeForm.badge_name} onChange={e => setBadgeForm(f => ({ ...f, badge_name: e.target.value }))} required />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Deskripsi</label>
                  <textarea className="w-full border rounded px-3 py-2" value={badgeForm.description} onChange={e => setBadgeForm(f => ({ ...f, description: e.target.value }))} required />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Tipe Kriteria (Opsional)</label>
                  <select 
                    className="w-full border rounded px-3 py-2" 
                    value={badgeForm.criteria_type} 
                    onChange={e => setBadgeForm(f => ({ ...f, criteria_type: e.target.value }))}
                  >
                    <option value="manual">Manual (Diberikan Admin)</option>
                    <option value="loyalty_points">Berdasarkan Loyalty Points</option>
                    <option value="tasks_completed">Berdasarkan Tugas Diselesaikan</option>
                    <option value="comments_count">Berdasarkan Jumlah Komentar</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Nilai Kriteria (Opsional)</label>
                  <input 
                    type="number" 
                    className="w-full border rounded px-3 py-2" 
                    value={badgeForm.criteria_value} 
                    onChange={e => setBadgeForm(f => ({ ...f, criteria_value: Number(e.target.value) || 0 }))}
                    min={0}
                    placeholder="0"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    {badgeForm.criteria_type === 'manual' && 'Untuk badge manual, kosongkan atau isi 0'}
                    {badgeForm.criteria_type === 'loyalty_points' && 'Minimal loyalty points yang dibutuhkan'}
                    {badgeForm.criteria_type === 'tasks_completed' && 'Minimal tugas yang harus diselesaikan'}
                    {badgeForm.criteria_type === 'comments_count' && 'Minimal jumlah komentar yang dibutuhkan'}
                  </p>
                </div>
                <div className="flex justify-end gap-2 mt-4">
                  <button type="button" onClick={closeBadgeModal} className="px-4 py-2 rounded bg-gray-200 hover:bg-gray-300">Batal</button>
                  <button type="submit" disabled={savingBadge} className="px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700">{savingBadge ? 'Menyimpan...' : 'Simpan'}</button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    );
  }


  // --- TUGAS CRUD ---
  const [tasks, setTasks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [editItem, setEditItem] = useState(null);
  const [form, setForm] = useState({ deskripsi_tugas: '', keyword_tugas: '', status: 'aktif', point_value: 0 });
  const [saving, setSaving] = useState(false);
  const [page, setPage] = useState(1);
  const [total, setTotal] = useState(0);
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredTasks, setFilteredTasks] = useState([]);
  const limit = 20;

  useEffect(() => {
    if (!isTugas) return;
    setLoading(true);
    setSearchTerm(''); // Reset search when switching to this tab
    fetch(`/api/admin/tugas?page=${page}&limit=${limit}`)
      .then(res => res.ok ? res.json() : Promise.reject(res))
      .then(res => {
        setTasks(res.tasks);
        setTotal(res.total);
      })
      .catch(() => setError('Gagal memuat data tugas.'))
      .finally(() => setLoading(false));
  }, [isTugas, page]);

  // Filter tasks based on search term
  useEffect(() => {
    if (!searchTerm.trim()) {
      setFilteredTasks(tasks);
    } else {
      const filtered = tasks.filter(task => 
        (task.deskripsi_tugas && task.deskripsi_tugas.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (task.keyword_tugas && task.keyword_tugas.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (task.status && task.status.toLowerCase().includes(searchTerm.toLowerCase()))
      );
      setFilteredTasks(filtered);
    }
  }, [tasks, searchTerm]);

  function openEditModal(item) {
    setEditItem(item);
    setForm({
      deskripsi_tugas: item.deskripsi_tugas,
      keyword_tugas: item.keyword_tugas,
      status: item.status,
      point_value: item.point_value
    });
    setShowModal(true);
  }
  function closeModal() {
    setShowModal(false);
    setEditItem(null);
    setForm({ deskripsi_tugas: '', keyword_tugas: '', status: 'aktif', point_value: 0 });
  }

  async function handleSave(e) {
    e.preventDefault();
    setSaving(true);
    try {
      const url = `/api/admin/tugas/${editItem.id}`;
      const res = await fetch(url, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(form),
      });
      if (!res.ok) throw new Error('Gagal menyimpan data.');
      closeModal();
      // Refresh data
      const refreshed = await fetch(`/api/admin/tugas?page=${page}&limit=${limit}`).then(r => r.json());
      setTasks(refreshed.tasks);
      setTotal(refreshed.total);
    } catch {
      alert('Gagal menyimpan data tugas.');
    }
    setSaving(false);
  }

  if (!isTugas) {
    return <div className="text-gray-500">CRUD for {resource} coming soon...</div>;
  }

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-bold">Kelola Tugas</h2>
      </div>
      
      {/* Search Box */}
      <div className="mb-4">
        <div className="relative">
          <input
            type="text"
            placeholder="Cari tugas berdasarkan deskripsi, keyword, atau status..."
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <div className="absolute inset-y-0 right-0 flex items-center pr-3">
            <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
        </div>
        {searchTerm && (
          <div className="mt-2 text-sm text-gray-600">
            Menampilkan {filteredTasks.length} dari {tasks.length} tugas
          </div>
        )}
      </div>

      {loading ? (
        <div className="text-center py-8">Memuat data tugas...</div>
      ) : error ? (
        <div className="text-center text-red-500 py-8">{error}</div>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full text-xs md:text-sm border">
            <thead className="bg-gray-100">
              <tr>
                <th className="px-2 py-1 border">ID</th>
                <th className="px-2 py-1 border">Deskripsi Tugas</th>
                <th className="px-2 py-1 border">Keyword</th>
                <th className="px-2 py-1 border">Status</th>
                <th className="px-2 py-1 border">Poin</th>
                <th className="px-2 py-1 border">Aksi</th>
              </tr>
            </thead>
            <tbody>
              {(filteredTasks || []).map((item) => (
                <tr key={item.id} className="even:bg-gray-50">
                  <td className="px-2 py-1 border text-center">{item.id}</td>
                  <td className="px-2 py-1 border">{item.deskripsi_tugas}</td>
                  <td className="px-2 py-1 border">{item.keyword_tugas}</td>
                  <td className="px-2 py-1 border text-center">{item.status}</td>
                  <td className="px-2 py-1 border text-center">{item.point_value}</td>
                  <td className="px-2 py-1 border text-center">
                    <div className="flex justify-center gap-2">
                      <button 
                        onClick={() => openEditModal(item)} 
                        className="text-blue-600 hover:text-blue-800 p-1 rounded hover:bg-blue-50 transition-colors"
                        title="Edit"
                      >
                        <PencilIcon className="w-4 h-4" />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
              {filteredTasks.length === 0 && searchTerm && (
                <tr>
                  <td colSpan="6" className="px-4 py-8 text-center text-gray-500">
                    Tidak ada tugas yang cocok dengan pencarian "{searchTerm}"
                  </td>
                </tr>
              )}
              {filteredTasks.length === 0 && !searchTerm && tasks.length === 0 && (
                <tr>
                  <td colSpan="6" className="px-4 py-8 text-center text-gray-500">
                    Belum ada data tugas
                  </td>
                </tr>
              )}
            </tbody>
          </table>
          {/* Pagination */}
          <div className="flex justify-between items-center mt-4">
            <span className="text-xs text-gray-500">Total: {total}</span>
            <div className="flex gap-2">
              <button disabled={page === 1} onClick={() => setPage(p => Math.max(1, p - 1))} className="px-2 py-1 rounded bg-gray-200 disabled:opacity-50">Prev</button>
              <span className="text-xs">Halaman {page}</span>
              <button disabled={page * limit >= total} onClick={() => setPage(p => p + 1)} className="px-2 py-1 rounded bg-gray-200 disabled:opacity-50">Next</button>
            </div>
          </div>
        </div>
      )}
      {/* Modal Edit */}
      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
          <div className="bg-white rounded shadow-lg p-6 w-full max-w-md">
            <h3 className="font-bold text-lg mb-4">Edit Tugas</h3>
            <form onSubmit={handleSave} className="space-y-3">
              <div>
                <label className="block text-sm font-medium mb-1">Deskripsi Tugas</label>
                <input type="text" className="w-full border rounded px-3 py-2" value={form.deskripsi_tugas} onChange={e => setForm(f => ({ ...f, deskripsi_tugas: e.target.value }))} required />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Keyword</label>
                <input type="text" className="w-full border rounded px-3 py-2" value={form.keyword_tugas} onChange={e => setForm(f => ({ ...f, keyword_tugas: e.target.value }))} required />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Status</label>
                <select className="w-full border rounded px-3 py-2" value={form.status} onChange={e => setForm(f => ({ ...f, status: e.target.value }))}>
                  <option key="aktif" value="aktif">Aktif</option>
                  <option key="tidak-aktif" value="tidak aktif">Tidak Aktif</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Poin</label>
                <input type="number" className="w-full border rounded px-3 py-2" value={form.point_value} onChange={e => setForm(f => ({ ...f, point_value: Number(e.target.value) }))} required min={0} />
              </div>
              <div className="flex justify-end gap-2 mt-4">
                <button type="button" onClick={closeModal} className="px-4 py-2 rounded bg-gray-200 hover:bg-gray-300">Batal</button>
                <button type="submit" disabled={saving} className="px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700">{saving ? 'Menyimpan...' : 'Simpan'}</button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

// --- Redemption Verification Section Component ---
function RedemptionVerificationSection() {
  const [pendingRedemptions, setPendingRedemptions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [processing, setProcessing] = useState(null);

  const fetchPendingRedemptions = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/admin/redemptions?status=menunggu_verifikasi');
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      setPendingRedemptions(result.data || []);
    } catch (err) {
      setError('Gagal memuat data verifikasi: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPendingRedemptions();
  }, []);

  const handleApprove = async (redemptionId) => {
    try {
      setProcessing(redemptionId);
      
      const response = await fetch('/api/admin/redemptions/approve', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ redemptionId })
      });

      if (!response.ok) {
        throw new Error('Gagal menyetujui penukaran');
      }

      const result = await response.json();
      
      // Remove from pending list
      setPendingRedemptions(prev => prev.filter(r => r.id !== redemptionId));
      
      // Show success message
      alert(result.message);

    } catch (err) {
      alert('Error: ' + err.message);
    } finally {
      setProcessing(null);
    }
  };

  const handleReject = async (redemptionId) => {
    if (!confirm('Yakin menolak penukaran ini? Poin akan dikembalikan ke member.')) {
      return;
    }

    try {
      setProcessing(redemptionId);
      
      const response = await fetch('/api/admin/redemptions/reject', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ redemptionId })
      });

      if (!response.ok) {
        throw new Error('Gagal menolak penukaran');
      }

      const result = await response.json();
      
      // Remove from pending list
      setPendingRedemptions(prev => prev.filter(r => r.id !== redemptionId));
      
      // Show success message
      alert(result.message);

    } catch (err) {
      alert('Error: ' + err.message);
    } finally {
      setProcessing(null);
    }
  };

  const formatDate = (dateString) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleString('id-ID', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return dateString;
    }
  };

  const formatPoints = (points) => {
    return points?.toLocaleString('id-ID') || '0';
  };

  return (
    <div className="mb-8 border-t pt-6">
      <div className="flex justify-between items-center mb-4">
        <div>
          <h3 className="text-lg font-bold">Verifikasi Penukaran Poin</h3>
          <p className="text-sm text-gray-600">
            Penukaran yang menunggu persetujuan admin
          </p>
        </div>
        <button 
          onClick={fetchPendingRedemptions}
          className="text-blue-600 hover:text-blue-800 text-sm font-medium"
        >
          Refresh
        </button>
      </div>
      
      {loading ? (
        <div className="text-center py-8">Memuat data verifikasi...</div>
      ) : error ? (
        <div className="text-center text-red-500 py-8">{error}</div>
      ) : pendingRedemptions.length === 0 ? (
        <div className="text-center text-gray-500 py-8 bg-gray-50 rounded-lg">
          Tidak ada penukaran yang menunggu verifikasi
        </div>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full text-xs md:text-sm border">
            <thead className="bg-yellow-50">
              <tr>
                <th className="px-3 py-2 border text-left">Waktu</th>
                <th className="px-3 py-2 border text-left">Nama Member</th>
                <th className="px-3 py-2 border text-left">Hadiah</th>
                <th className="px-3 py-2 border text-right">Poin</th>
                <th className="px-3 py-2 border text-center">Aksi</th>
              </tr>
            </thead>
            <tbody>
              {pendingRedemptions.map((redemption) => (
                <tr key={redemption.id} className="even:bg-gray-50 hover:bg-yellow-50">
                  <td className="px-3 py-2 border">
                    {formatDate(redemption.redeemed_at)}
                  </td>
                  <td className="px-3 py-2 border font-medium">
                    {redemption.nama_lengkap}
                  </td>
                  <td className="px-3 py-2 border">
                    {redemption.reward_name}
                  </td>
                  <td className="px-3 py-2 border text-right font-medium">
                    {formatPoints(redemption.points_spent)}
                  </td>
                  <td className="px-3 py-2 border text-center">
                    <div className="flex gap-2 justify-center">
                      <button
                        onClick={() => handleApprove(redemption.id)}
                        disabled={processing === redemption.id}
                        className="bg-green-600 text-white px-3 py-1 rounded text-xs hover:bg-green-700 disabled:opacity-50"
                      >
                        {processing === redemption.id ? 'Loading...' : 'Setujui'}
                      </button>
                      <button
                        onClick={() => handleReject(redemption.id)}
                        disabled={processing === redemption.id}
                        className="bg-red-600 text-white px-3 py-1 rounded text-xs hover:bg-red-700 disabled:opacity-50"
                      >
                        {processing === redemption.id ? 'Loading...' : 'Tolak'}
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
          
          <div className="mt-4 text-sm text-gray-600">
            {pendingRedemptions.length} penukaran menunggu verifikasi
          </div>
        </div>
      )}
    </div>
  );
}

// --- Redemption History Section Component ---
function RedemptionHistorySection() {
  const [redemptions, setRedemptions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchRedemptions = async () => {
      try {
        setLoading(true);
        // Fetch all redemptions (both approved and rejected)
        const response = await fetch('/api/admin/redemptions');
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.json();
        // Filter to show only processed redemptions (approved or rejected)
        const processedRedemptions = (result.data || []).filter(
          r => r.status === 'disetujui' || r.status === 'ditolak'
        );
        setRedemptions(processedRedemptions);
      } catch (err) {
        setError('Gagal memuat riwayat penukaran: ' + err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchRedemptions();
  }, []);

  const formatDate = (dateString) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleString('id-ID', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return dateString;
    }
  };

  const formatPoints = (points) => {
    return points?.toLocaleString('id-ID') || '0';
  };

  const getStatusBadge = (status) => {
    const statusConfig = {
      'disetujui': { label: 'Disetujui', className: 'bg-green-100 text-green-800' },
      'ditolak': { label: 'Ditolak', className: 'bg-red-100 text-red-800' },
    };
    
    const config = statusConfig[status] || { label: status, className: 'bg-gray-100 text-gray-800' };
    
    return (
      <span className={`px-2 py-1 rounded-full text-xs font-medium ${config.className}`}>
        {config.label}
      </span>
    );
  };

  return (
    <div className="mt-8 border-t pt-6">
      <div className="mb-4">
        <h3 className="text-lg font-bold">Riwayat Penukaran Hadiah</h3>
        <p className="text-sm text-gray-600">
          Semua penukaran yang telah diproses (disetujui atau ditolak)
        </p>
      </div>
      
      {loading ? (
        <div className="text-center py-8">Memuat riwayat penukaran...</div>
      ) : error ? (
        <div className="text-center text-red-500 py-8">{error}</div>
      ) : redemptions.length === 0 ? (
        <div className="text-center text-gray-500 py-8">Belum ada riwayat penukaran hadiah</div>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full text-xs md:text-sm border">
            <thead className="bg-gray-100">
              <tr>
                <th className="px-2 py-2 border text-left">Waktu Penukaran</th>
                <th className="px-2 py-2 border text-left">Nama Member</th>
                <th className="px-2 py-2 border text-left">Hadiah yang Ditukar</th>
                <th className="px-2 py-2 border text-right">Poin Dikeluarkan</th>
                <th className="px-2 py-2 border text-right">Poin Sebelum</th>
                <th className="px-2 py-2 border text-right">Poin Sesudah</th>
                <th className="px-2 py-2 border text-center">Status</th>
              </tr>
            </thead>
            <tbody>
              {redemptions.map((redemption) => (
                <tr key={redemption.id} className="even:bg-gray-50 hover:bg-blue-50">
                  <td className="px-2 py-2 border">
                    {formatDate(redemption.redeemed_at)}
                  </td>
                  <td className="px-2 py-2 border font-medium">
                    {redemption.nama_lengkap}
                  </td>
                  <td className="px-2 py-2 border">
                    {redemption.reward_name}
                  </td>
                  <td className="px-2 py-2 border text-right font-medium text-red-600">
                    {formatPoints(Math.abs(redemption.points_spent))}
                  </td>
                  <td className="px-2 py-2 border text-right">
                    {formatPoints(redemption.points_before)}
                  </td>
                  <td className="px-2 py-2 border text-right">
                    {formatPoints(redemption.points_after)}
                  </td>
                  <td className="px-2 py-2 border text-center">
                    {getStatusBadge(redemption.status)}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
          
          {redemptions.length > 0 && (
            <div className="mt-4 text-sm text-gray-600">
              Total {redemptions.length} riwayat penukaran
            </div>
          )}
        </div>
      )}
    </div>
  );
}

// --- Points Monitoring Tab Component ---
function PointsMonitoringTab() {
  const [data, setData] = useState({ history: [], members: [] });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [eventTypeFilter, setEventTypeFilter] = useState('');
  const [submitting, setSubmitting] = useState(false);
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  
  // Form state
  const [correctionForm, setCorrectionForm] = useState({
    memberId: '',
    pointValue: '',
    reason: ''
  });

  const fetchData = async () => {
    try {
      setLoading(true);
      const params = new URLSearchParams();
      if (searchTerm) params.append('search', searchTerm);
      if (eventTypeFilter) params.append('eventType', eventTypeFilter);
      if (startDate) params.append('startDate', startDate);
      if (endDate) params.append('endDate', endDate);
      
      const response = await fetch(`/api/admin/points?${params.toString()}`);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      setData(result.data);
    } catch (err) {
      setError('Gagal memuat data: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, [searchTerm, eventTypeFilter, startDate, endDate]);

  const handleOpenModal = () => {
    setCorrectionForm({ memberId: '', pointValue: '', reason: '' });
    setShowModal(true);
  };

  const handleCloseModal = () => {
    setShowModal(false);
    setCorrectionForm({ memberId: '', pointValue: '', reason: '' });
  };

  const handleSubmitCorrection = async (e) => {
    e.preventDefault();
    setSubmitting(true);

    try {
      const response = await fetch('/api/admin/points/correction', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          memberId: parseInt(correctionForm.memberId),
          pointValue: parseInt(correctionForm.pointValue),
          reason: correctionForm.reason
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Gagal melakukan koreksi');
      }

      const result = await response.json();
      alert(result.message);
      
      handleCloseModal();
      fetchData(); // Refresh data
      
    } catch (err) {
      alert('Error: ' + err.message);
    } finally {
      setSubmitting(false);
    }
  };

  const formatDate = (dateString) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleString('id-ID', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return dateString;
    }
  };

  const formatPoints = (points) => {
    const value = parseInt(points);
    const formatted = Math.abs(value).toLocaleString('id-ID');
    return value >= 0 ? `+${formatted}` : `-${formatted}`;
  };

  const getEventTypeColor = (eventType) => {
    const colorMap = {
      'admin_correction': 'bg-purple-100 text-purple-800',
      'reward_redemption': 'bg-red-100 text-red-800',
      'redemption_refund': 'bg-blue-100 text-blue-800',
      'task_completion': 'bg-green-100 text-green-800',
      'comment_activity': 'bg-yellow-100 text-yellow-800'
    };
    return colorMap[eventType] || 'bg-gray-100 text-gray-800';
  };

  // Get unique event types for filter
  const eventTypes = [...new Set(data.history.map(h => h.event_type).filter(Boolean))];

  return (
    <div>
      <div className="mb-6">
        <h2 className="text-xl font-bold mb-2">Monitoring Poin Loyalitas</h2>
        <p className="text-gray-600">Kelola dan pantau aktivitas poin loyalitas member</p>
      </div>

      {/* Manual Correction Section */}
      <div className="mb-8 p-4 bg-blue-50 rounded-lg">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h3 className="font-semibold text-blue-900">Koreksi Manual</h3>
            <p className="text-sm text-blue-700">Tambah atau kurangi poin member secara manual</p>
          </div>
          <button
            onClick={handleOpenModal}
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 font-medium"
          >
            Koreksi Poin Manual
          </button>
        </div>
      </div>

      {/* Filters */}
      <div className="mb-6 p-4 bg-gray-50 rounded-lg">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-2">Cari berdasarkan nama member</label>
            <input
              type="text"
              placeholder="Masukkan nama member..."
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-2">Filter berdasarkan tipe aktivitas</label>
            <select
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={eventTypeFilter}
              onChange={(e) => setEventTypeFilter(e.target.value)}
            >              <option value="">Semua aktivitas</option>
              {eventTypes.map((type, index) => (
                <option key={`${type || 'unknown'}-${index}`} value={type}>
                  {type ? type.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()) : 'Unknown'}
                </option>
              ))}
            </select>
          </div>
        </div>
        {/* Date Filters */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
          <div>
            <label className="block text-sm font-medium mb-2">Tanggal Awal</label>
            <input
              type="date"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
              className="border p-2 rounded w-full"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-2">Tanggal Akhir</label>
            <input
              type="date"
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
              className="border p-2 rounded w-full"
            />
          </div>
        </div>
      </div>

      {/* History Table */}
      <div>
        <h3 className="text-lg font-semibold mb-4">Riwayat Aktivitas Poin</h3>
        
        {loading ? (
          <div className="text-center py-8">Memuat riwayat poin...</div>
        ) : error ? (
          <div className="text-center text-red-500 py-8">{error}</div>
        ) : data.history.length === 0 ? (
          <div className="text-center text-gray-500 py-8">Tidak ada riwayat ditemukan</div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full text-xs md:text-sm border">
              <thead className="bg-gray-100">
                <tr>
                  <th className="px-3 py-2 border text-left">Waktu</th>
                  <th className="px-3 py-2 border text-left">Nama Member</th>
                  <th className="px-3 py-2 border text-left">Aktivitas/Event</th>
                  <th className="px-3 py-2 border text-center">Tipe</th>
                  <th className="px-3 py-2 border text-right">Jumlah Poin</th>
                </tr>
              </thead>
              <tbody>
                {data.history.map((item) => (
                  <tr key={item.id} className="even:bg-gray-50 hover:bg-blue-50">
                    <td className="px-3 py-2 border">
                      {formatDate(item.created_at)}
                    </td>
                    <td className="px-3 py-2 border font-medium">
                      {item.members?.nama_lengkap || 'N/A'}
                    </td>
                    <td className="px-3 py-2 border">
                      {item.event}
                    </td>
                    <td className="px-3 py-2 border text-center">
                      {item.event_type && (
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getEventTypeColor(item.event_type)}`}>
                          {item.event_type.replace(/_/g, ' ')}
                        </span>
                      )}
                    </td>
                    <td className={`px-3 py-2 border text-right font-medium ${
                      item.point >= 0 ? 'text-green-600' : 'text-red-600'
                    }`}>
                      {formatPoints(item.point)}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            
            <div className="mt-4 text-sm text-gray-600">
              Menampilkan {data.history.length} aktivitas terakhir
            </div>
          </div>
        )}
      </div>

      {/* Modal for Point Correction */}
      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-lg p-6 w-full max-w-md">
            <h3 className="font-bold text-lg mb-4">Koreksi Poin Manual</h3>
            <form onSubmit={handleSubmitCorrection} className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">Pilih Member</label>
                <select
                  className="w-full border rounded px-3 py-2"
                  value={correctionForm.memberId}
                  onChange={e => setCorrectionForm(f => ({ ...f, memberId: e.target.value }))}
                  required
                >
                  <option value="">-- Pilih Member --</option>
                  {data.members.map(member => (
                    <option key={member.id} value={member.id}>
                      {member.nama_lengkap} (Poin: {member.loyalty_point?.toLocaleString('id-ID') || 0})
                    </option>
                  ))}
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-2">Jumlah Poin</label>
                <input
                  type="number"
                  className="w-full border rounded px-3 py-2"
                  placeholder="Masukkan jumlah poin (+ untuk menambah, - untuk mengurangi)"
                  value={correctionForm.pointValue}
                  onChange={e => setCorrectionForm(f => ({ ...f, pointValue: e.target.value }))}
                  required
                />
                <p className="text-xs text-gray-500 mt-1">
                  Gunakan angka positif untuk menambah, negatif untuk mengurangi
                </p>
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-2">Alasan Koreksi</label>
                <textarea
                  className="w-full border rounded px-3 py-2"
                  placeholder="Jelaskan alasan koreksi poin..."
                  rows={3}
                  value={correctionForm.reason}
                  onChange={e => setCorrectionForm(f => ({ ...f, reason: e.target.value }))}
                  required
                />
              </div>
              
              <div className="flex justify-end gap-2 mt-6">
                <button
                  type="button"
                  onClick={handleCloseModal}
                  className="px-4 py-2 rounded bg-gray-200 hover:bg-gray-300"
                  disabled={submitting}
                >
                  Batal
                </button>
                <button
                  type="submit"
                  disabled={submitting}
                  className="px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50"
                >
                  {submitting ? 'Memproses...' : 'Koreksi Poin'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}
