 'use client';
import { useState, useEffect, useRef, useCallback } from 'react';
import { useUser } from '@clerk/nextjs';
import { useRouter } from 'next/navigation';
import { PencilIcon, TrashIcon, PlusIcon, EyeIcon, MagnifyingGlassIcon, XMarkIcon, ShareIcon } from '@heroicons/react/24/outline';
import AdminModal from '../components/AdminModal';
import ScrollToTopButton from '../components/ScrollToTopButton';
import { GlassContainer, GlassCard, GlassButton } from '@/components/GlassLayout';
import { useResponsive, useGlassEffects } from '@/hooks/useGlassTheme';

export default function TasksTab() {
  const { user } = useUser();
  const router = useRouter();
  const { responsive, isMobile, isTablet } = useResponsive();
  const { getGlassClasses, glassConfig } = useGlassEffects();
  
  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const observer = useRef();
  const [showModal, setShowModal] = useState(false);
  const [editingItem, setEditingItem] = useState(null);
  const [modalPosition, setModalPosition] = useState(null);
  const [formData, setFormData] = useState({
    keyword_tugas: '',
    deskripsi_tugas: '',
    link_postingan: '',
    point_value: '',
    status: 'tersedia'
  });
  const [sortConfig, setSortConfig] = useState({ key: 'post_timestamp', direction: 'desc' });
  const [search, setSearch] = useState('');
  const [searchInput, setSearchInput] = useState('');
  // Statistics state
  const [stats, setStats] = useState({
    total_tugas: 0,
    sedang_diverifikasi: 0,
    gagal_diverifikasi: 0,
    verified: 0,
    total_submissions: 0
  });
  const [statsLoading, setStatsLoading] = useState(true);
  const statusOptions = [
    { value: 'tersedia', label: 'Tersedia' },
    { value: 'tidak_tersedia', label: 'Tidak Tersedia' },
    { value: 'selesai', label: 'Selesai' }
  ];

  // Helper function untuk format URL agar lebih readable
  const formatUrl = (url) => {
    if (!url) return '-';
    try {
      const urlObj = new URL(url);
      const domain = urlObj.hostname.replace('www.', '');
      const path = urlObj.pathname.length > 20 ? urlObj.pathname.substring(0, 20) + '...' : urlObj.pathname;
      return `${domain}${path}`;
    } catch {
      // Jika URL tidak valid, tampilkan sebagian dari string
      return url.length > 30 ? url.substring(0, 30) + '...' : url;
    }
  };

  // Helper function untuk format timestamp
  const formatTimestamp = (timestamp) => {
    if (!timestamp) return '-';
    try {
      const date = new Date(timestamp);
      return date.toLocaleString('id-ID', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      });
    } catch {
      return '-';
    }
  };

  useEffect(() => {
    setItems([]);
    setPage(1);
    setHasMore(true);
  }, [search]);

  useEffect(() => {
    fetchItems(page);
    // eslint-disable-next-line
  }, [page, search]);

  // Load stats when component mounts
  useEffect(() => {
    if (user?.primaryEmailAddress?.emailAddress) {
      fetchStats();
    }
  }, [user?.primaryEmailAddress?.emailAddress]);

  // Function to fetch statistics
  const fetchStats = async () => {
    setStatsLoading(true);
    try {
      const response = await fetch('/api/admin/tugas/stats');
      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          setStats(result.stats);
        }
      } else {
        console.error('Error fetching stats:', response.statusText);
      }
    } catch (error) {
      console.error('Error fetching stats:', error);
    } finally {
      setStatsLoading(false);
    }
  };

  const fetchItems = async (pageNum = 1) => {
    if (!hasMore && pageNum !== 1) return;
    setLoading(true);
    try {
      const response = await fetch(`/api/admin/tugas?page=${pageNum}&q=${encodeURIComponent(search)}`, {
        headers: { 'x-user-email': user?.primaryEmailAddress?.emailAddress }
      });
      if (response.ok) {
        const result = await response.json();
        const newTasks = Array.isArray(result.tasks) ? result.tasks : [];
        setItems(prev => pageNum === 1 ? newTasks : [...prev, ...newTasks]);
        setHasMore(newTasks.length > 0);
      } else {
        if (pageNum === 1) setItems([]);
        setHasMore(false);
      }
    } catch (error) {
      console.error('Error fetching tasks:', error);
      if (pageNum === 1) setItems([]);
      setHasMore(false);
    } finally {
      setLoading(false);
    }
  };

  // Infinite scroll observer
  const lastTaskElementRef = useCallback(node => {
    if (loading) return;
    if (observer.current) observer.current.disconnect();
    observer.current = new window.IntersectionObserver(entries => {
      if (entries[0].isIntersecting && hasMore) {
        setPage(prev => prev + 1);
      }
    });
    if (node) observer.current.observe(node);
  }, [loading, hasMore]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const url = editingItem ? `/api/admin/tugas/${editingItem.id}` : '/api/admin/tugas';
      const method = editingItem ? 'PUT' : 'POST';
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
          'x-user-email': user?.primaryEmailAddress?.emailAddress
        },
        body: JSON.stringify({
          keyword_tugas: formData.keyword_tugas,
          deskripsi_tugas: formData.deskripsi_tugas,
          link_postingan: formData.link_postingan,
          point_value: parseInt(formData.point_value) || 10,
          status: formData.status
        })
      });

      if (response.ok) {
        fetchItems();
        fetchStats(); // Refresh statistics after save
        closeModal();
      } else {
        alert('Error saving task');
      }
    } catch (error) {
      console.error('Error saving task:', error);
      alert('Error saving task');
    }
  };

  const handleDelete = async (id, forceDelete = false) => {
    const confirmMessage = forceDelete 
      ? 'Yakin ingin menghapus tugas ini BESERTA SEMUA SUBMISSION terkait? Tindakan ini tidak dapat dibatalkan!' 
      : 'Yakin ingin menghapus tugas ini?';
      
    if (!confirm(confirmMessage)) return;
    
    try {
      const url = forceDelete ? `/api/admin/tugas/${id}?force=true` : `/api/admin/tugas/${id}`;
      const response = await fetch(url, {
        method: 'DELETE',
        headers: { 'x-user-email': user?.primaryEmailAddress?.emailAddress }
      });

      if (response.ok) {
        const result = await response.json();
        alert(result.message || 'Tugas berhasil dihapus');
        fetchItems();
        fetchStats(); // Refresh statistics after deletion
      } else {
        const errorResult = await response.json();
        if (errorResult.hasSubmissions && !forceDelete) {
          const forceDeleteConfirm = confirm(
            `❌ ${errorResult.message}\n\nApakah Anda ingin menghapus tugas beserta ${errorResult.submissionCount} submission terkait?\n\n⚠️ PERINGATAN: Tindakan ini akan menghapus semua data submission dan tidak dapat dibatalkan!`
          );
          
          if (forceDeleteConfirm) {
            // Recursive call with force delete
            handleDelete(id, true);
          }
        } else {
          alert(errorResult.error || errorResult.message || 'Error deleting task');
        }
      }
    } catch (error) {
      console.error('Error deleting task:', error);
      alert('❌ Terjadi kesalahan saat menghapus tugas');
    }
  };

  const toggleActive = async (id, currentStatus) => {
    try {
      const newStatus = currentStatus === 'tersedia' ? 'tidak_tersedia' : 'tersedia';
      const response = await fetch(`/api/admin/tugas/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'x-user-email': user?.primaryEmailAddress?.emailAddress
        },
        body: JSON.stringify({ status: newStatus })
      });

      if (response.ok) {
        fetchItems();
        fetchStats(); // Refresh statistics after status change
      } else {
        alert('Error updating task status');
      }
    } catch (error) {
      console.error('Error updating task status:', error);
      alert('Error updating task status');
    }
  };

  const openModal = (item = null, event = null) => {
    // Capture click position
    if (event) {
      setModalPosition({
        top: event.clientY,
        left: event.clientX
      });
    } else {
      setModalPosition(null);
    }
    
    setEditingItem(item);
    if (item) {
      setFormData({
        keyword_tugas: item.keyword_tugas || '',
        deskripsi_tugas: item.deskripsi_tugas || '',
        link_postingan: item.link_postingan || '',
        point_value: item.point_value?.toString() || '10',
        status: item.status || 'tersedia'
      });
    } else {
      setFormData({
        keyword_tugas: '',
        deskripsi_tugas: '',
        link_postingan: '',
        point_value: '10',
        status: 'tersedia'
      });
    }
    setShowModal(true);
  };

  const closeModal = () => {
    setShowModal(false);
    setEditingItem(null);
    setModalPosition(null);
    setFormData({
      keyword_tugas: '',
      deskripsi_tugas: '',
      link_postingan: '',
      point_value: '10',
      status: 'tersedia'
    });
  };

  const getStatusLabel = (status) => {
    const statusObj = statusOptions.find(s => s.value === status);
    return statusObj ? statusObj.label : status;
  };

  const handleShare = async (taskId) => {
    try {
      const taskUrl = `${window.location.origin}/tugas/${taskId}`;
      
      // Try to use the Web Share API if available (mobile/modern browsers)
      if (navigator.share) {
        await navigator.share({
          title: 'Link Tugas',
          text: 'Lihat tugas ini',
          url: taskUrl
        });
      } else {
        // Fallback: copy to clipboard
        await navigator.clipboard.writeText(taskUrl);
        alert('✅ Link tugas berhasil disalin ke clipboard!\n\n' + taskUrl);
      }
    } catch (error) {
      console.error('Error sharing task:', error);
      // Manual fallback if clipboard API fails
      const taskUrl = `${window.location.origin}/tugas/${taskId}`;
      prompt('Copy link tugas ini:', taskUrl);
    }
  };

  // Fungsi untuk melakukan pencarian
  const handleSearch = () => {
    setSearch(searchInput);
    // Scroll ke atas untuk melihat hasil pencarian
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  // Fungsi untuk handle Enter key pada input pencarian
  const handleSearchKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  // Fungsi untuk clear pencarian
  const clearSearch = () => {
    setSearchInput('');
    setSearch('');
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <GlassContainer className="flex flex-col items-center justify-center p-8">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mb-4"></div>
          <div className="text-lg text-gray-700">Memuat data tugas...</div>
        </GlassContainer>
      </div>
    );
  }

  // Search & Sorting logic
  let filteredItems = Array.isArray(items) ? items.filter(item => {
    const q = search.toLowerCase();
    return (
      String(item.id).includes(q) ||
      (item.keyword_tugas && item.keyword_tugas.toLowerCase().includes(q)) ||
      (item.deskripsi_tugas && item.deskripsi_tugas.toLowerCase().includes(q)) ||
      (item.link_postingan && item.link_postingan.toLowerCase().includes(q)) ||
      (item.status && item.status.toLowerCase().includes(q))
    );
  }) : [];
  let sortedItems = [...filteredItems];
  if (sortConfig.key) {
    sortedItems.sort((a, b) => {
      let aVal = a[sortConfig.key];
      let bVal = b[sortConfig.key];
      if (typeof aVal === 'string') aVal = aVal.toLowerCase();
      if (typeof bVal === 'string') bVal = bVal.toLowerCase();
      if (aVal < bVal) return sortConfig.direction === 'asc' ? -1 : 1;
      if (aVal > bVal) return sortConfig.direction === 'asc' ? 1 : -1;
      return 0;
    });
  }
  function handleSort(key) {
    setSortConfig((prev) => {
      if (prev.key === key) {
        return { key, direction: prev.direction === 'asc' ? 'desc' : 'asc' };
      }
      return { key, direction: 'asc' };
    });
  }

  return (
    <div className="max-w-full mx-auto space-y-6 p-6">
      {/* Header Section with Glass Effect */}
      <GlassContainer className="p-6" blur="xl" opacity="20" hover={true}>
          <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4">
            <div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                Manajemen Tugas
              </h1>
              <p className="text-gray-600 mt-1">Kelola dan pantau semua tugas dengan mudah</p>
            </div>
            <div className="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
              {/* Search Section */}
              <div className="flex gap-2">
                <input
                  type="text"
                  className="backdrop-blur-lg bg-white/30 border border-white/40 rounded-xl px-4 py-2 w-full sm:w-64 focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 placeholder-gray-600"
                  placeholder="Cari tugas, deskripsi, link, status, ID..."
                  value={searchInput}
                  onChange={(e) => setSearchInput(e.target.value)}
                  onKeyPress={handleSearchKeyPress}
                />
                <button
                  onClick={handleSearch}
                  className="backdrop-blur-lg bg-green-500/20 hover:bg-green-500/30 border border-green-400/30 text-green-700 px-4 py-2 rounded-xl flex items-center gap-1 transition-all duration-200"
                  title="Cari Tugas"
                >
                  <MagnifyingGlassIcon className="h-4 w-4" />
                  <span className="hidden sm:inline">Cari</span>
                </button>
                {search && (
                  <button
                    onClick={clearSearch}
                    className="backdrop-blur-lg bg-gray-500/20 hover:bg-gray-500/30 border border-gray-400/30 text-gray-700 px-4 py-2 rounded-xl flex items-center gap-1 transition-all duration-200"
                    title="Bersihkan Pencarian"
                  >
                    <XMarkIcon className="h-4 w-4" />
                    <span className="hidden sm:inline">Clear</span>
                  </button>
                )}
              </div>
              <GlassButton 
                variant="primary"
                onClick={(e) => openModal(null, e)}
                className="flex items-center gap-2 font-medium"
              >
                <PlusIcon className="h-5 w-5" />
                Tambah Tugas
              </GlassButton>
            </div>
          </div>
        </GlassContainer>

        <GlassContainer className="p-0" blur="lg" opacity="10" hover={false}>
          {search && (
            <div className="px-6 py-3 bg-blue-500/10 backdrop-blur border-b border-blue-200/30 rounded-t-xl">
              <div className="flex items-center justify-between">
                <p className="text-sm text-blue-800">
                  <span className="font-medium">Pencarian aktif:</span> "{search}"
                </p>
                <button
                  onClick={clearSearch}
                  className="text-blue-700 hover:text-blue-900 text-sm font-medium"
                >
                  Bersihkan pencarian
                </button>
            </div>
          </div>
        )}

        {/* Statistics Cards */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-6 mb-8">
          {/* Total Tugas Card */}
          <div className="backdrop-blur-xl bg-gradient-to-br from-blue-500/10 to-blue-600/20 border border-blue-400/30 rounded-2xl shadow-xl p-6 hover:shadow-2xl transition-all duration-300">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-blue-800/80">Total Tugas</p>
                <p className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-blue-800 bg-clip-text text-transparent">
                  {statsLoading ? (
                    <span className="animate-pulse bg-gradient-to-r from-blue-300/50 to-blue-400/50 rounded-lg w-16 h-8 inline-block"></span>
                  ) : (
                    stats.total_tugas.toLocaleString('id-ID')
                  )}
                </p>
              </div>
              <div className="backdrop-blur-lg bg-blue-500/20 p-4 rounded-2xl shadow-lg">
                <svg className="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
              </div>
            </div>
            <p className="text-xs text-blue-700/70 mt-3 font-medium">Total tugas di sistem</p>
          </div>

          {/* Sedang Diverifikasi Card */}
          <div className="backdrop-blur-xl bg-gradient-to-br from-yellow-500/10 to-yellow-600/20 border border-yellow-400/30 rounded-2xl shadow-xl p-6 hover:shadow-2xl transition-all duration-300">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-yellow-800/80">Sedang Diverifikasi</p>
                <p className="text-3xl font-bold bg-gradient-to-r from-yellow-600 to-yellow-800 bg-clip-text text-transparent">
                  {statsLoading ? (
                    <span className="animate-pulse bg-gradient-to-r from-yellow-300/50 to-yellow-400/50 rounded-lg w-16 h-8 inline-block"></span>
                  ) : (
                    stats.sedang_diverifikasi.toLocaleString('id-ID')
                  )}
                </p>
              </div>
              <div className="backdrop-blur-lg bg-yellow-500/20 p-4 rounded-2xl shadow-lg">
                <svg className="w-8 h-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
            </div>
            <p className="text-xs text-yellow-700/70 mt-3 font-medium">Menunggu review admin</p>
          </div>

          {/* Gagal Diverifikasi Card */}
          <div className="backdrop-blur-xl bg-gradient-to-br from-red-500/10 to-red-600/20 border border-red-400/30 rounded-2xl shadow-xl p-6 hover:shadow-2xl transition-all duration-300">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-red-800/80">Gagal Diverifikasi</p>
                <p className="text-3xl font-bold bg-gradient-to-r from-red-600 to-red-800 bg-clip-text text-transparent">
                  {statsLoading ? (
                    <span className="animate-pulse bg-gradient-to-r from-red-300/50 to-red-400/50 rounded-lg w-16 h-8 inline-block"></span>
                  ) : (
                    stats.gagal_diverifikasi.toLocaleString('id-ID')
                  )}
                </p>
              </div>
              <div className="backdrop-blur-lg bg-red-500/20 p-4 rounded-2xl shadow-lg">
                <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
            </div>
            <p className="text-xs text-red-700/70 mt-3 font-medium">Submission ditolak</p>
          </div>

          {/* Berhasil Diverifikasi Card */}
          <div className="backdrop-blur-xl bg-gradient-to-br from-green-500/10 to-green-600/20 border border-green-400/30 rounded-2xl shadow-xl p-6 hover:shadow-2xl transition-all duration-300">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-green-800/80">Berhasil Diverifikasi</p>
                <p className="text-3xl font-bold bg-gradient-to-r from-green-600 to-green-800 bg-clip-text text-transparent">
                  {statsLoading ? (
                    <span className="animate-pulse bg-gradient-to-r from-green-300/50 to-green-400/50 rounded-lg w-16 h-8 inline-block"></span>
                  ) : (
                    stats.verified.toLocaleString('id-ID')
                  )}
                </p>
              </div>
              <div className="backdrop-blur-lg bg-green-500/20 p-4 rounded-2xl shadow-lg">
                <svg className="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
            </div>
            <p className="text-xs text-green-700/70 mt-3 font-medium">Submission disetujui</p>
          </div>

          {/* Total Submissions Card */}
          <div className="backdrop-blur-xl bg-gradient-to-br from-purple-500/10 to-purple-600/20 border border-purple-400/30 rounded-2xl shadow-xl p-6 hover:shadow-2xl transition-all duration-300">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-purple-800/80">Total Submissions</p>
                <p className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-purple-800 bg-clip-text text-transparent">
                  {statsLoading ? (
                    <span className="animate-pulse bg-gradient-to-r from-purple-300/50 to-purple-400/50 rounded-lg w-16 h-8 inline-block"></span>
                  ) : (
                    stats.total_submissions.toLocaleString('id-ID')
                  )}
                </p>
              </div>
              <div className="backdrop-blur-lg bg-purple-500/20 p-4 rounded-2xl shadow-lg">
                <svg className="w-8 h-8 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v4a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>
              </div>
            </div>
            <p className="text-xs text-purple-700/70 mt-3 font-medium">Total semua submission</p>
          </div>
        </div>

        {/* Main Table Container */}
        <div className="backdrop-blur-xl bg-white/10 border border-white/20 rounded-2xl shadow-2xl overflow-hidden">
          {search && (
            <div className="px-6 py-4 backdrop-blur-lg bg-gradient-to-r from-blue-500/10 to-purple-500/10 border-b border-white/20">
              <div className="flex items-center justify-between">
                <p className="text-sm font-medium bg-gradient-to-r from-blue-700 to-purple-700 bg-clip-text text-transparent">
                  <span className="font-semibold">Pencarian aktif:</span> "{search}"
                </p>
                <button
                  onClick={clearSearch}
                  className="backdrop-blur-lg bg-blue-500/20 hover:bg-blue-500/30 border border-blue-400/30 text-blue-700 px-3 py-1 rounded-lg text-sm font-medium transition-all duration-200"
                >
                  Bersihkan pencarian
                </button>
              </div>
            </div>
          )}

          {/* Table Wrapper untuk Kolom Aksi yang Keluar */}
          <div className="relative">
            {/* Table Container */}
            <div className="overflow-x-auto">
              <table className="min-w-full">
                <thead>
                  <tr className="backdrop-blur-lg bg-gradient-to-r from-gray-500/10 to-gray-600/10 border-b border-white/10">
                    <th className="px-6 py-4 text-left text-xs font-bold text-gray-700 uppercase tracking-wider cursor-pointer select-none transition-colors hover:text-blue-600" onClick={() => handleSort('id')}>
                      ID {sortConfig.key === 'id' ? (sortConfig.direction === 'asc' ? '▲' : '▼') : ''}
                    </th>
                    <th className="px-6 py-4 text-left text-xs font-bold text-gray-700 uppercase tracking-wider cursor-pointer select-none transition-colors hover:text-blue-600" onClick={() => handleSort('keyword_tugas')}>
                      Tugas {sortConfig.key === 'keyword_tugas' ? (sortConfig.direction === 'asc' ? '▲' : '▼') : ''}
                    </th>
                    <th className="px-4 py-4 text-left text-xs font-bold text-gray-700 uppercase tracking-wider cursor-pointer select-none transition-colors hover:text-blue-600" onClick={() => handleSort('link_postingan')}>
                      Link Postingan {sortConfig.key === 'link_postingan' ? (sortConfig.direction === 'asc' ? '▲' : '▼') : ''}
                    </th>
                    <th className="px-6 py-4 text-left text-xs font-bold text-gray-700 uppercase tracking-wider cursor-pointer select-none transition-colors hover:text-blue-600" onClick={() => handleSort('point_value')}>
                      Point Value {sortConfig.key === 'point_value' ? (sortConfig.direction === 'asc' ? '▲' : '▼') : ''}
                    </th>
                    <th className="px-6 py-4 text-left text-xs font-bold text-gray-700 uppercase tracking-wider cursor-pointer select-none transition-colors hover:text-blue-600" onClick={() => handleSort('post_timestamp')}>
                      Post Timestamp {sortConfig.key === 'post_timestamp' ? (sortConfig.direction === 'asc' ? '▲' : '▼') : ''}
                    </th>
                    <th className="px-6 py-4 text-left text-xs font-bold text-gray-700 uppercase tracking-wider cursor-pointer select-none transition-colors hover:text-blue-600" onClick={() => handleSort('status')}>
                      Status {sortConfig.key === 'status' ? (sortConfig.direction === 'asc' ? '▲' : '▼') : ''}
                    </th>
                    {/* Kolom kosong untuk ruang aksi */}
                    <th className="w-20"></th>
                  </tr>
                </thead>
                <tbody className="backdrop-blur-lg bg-white/5 divide-y divide-white/10">
                  {sortedItems.map((item, idx) => {
                    const isLast = idx === sortedItems.length - 1;
                    return (
                      <tr
                        key={item.id}
                        className="group hover:backdrop-blur-xl hover:bg-gradient-to-r hover:from-blue-500/5 hover:to-purple-500/5 transition-all duration-300"
                        ref={isLast ? lastTaskElementRef : undefined}
                      >
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm font-semibold text-gray-800">{item.id}</div>
                        </td>
                        <td className="px-6 py-4">
                          <div className="text-sm font-semibold text-gray-800 max-w-xs">{item.keyword_tugas && item.keyword_tugas !== 'null' ? item.keyword_tugas : 'Tugas Tanpa Keyword, Tinggalkan saja Komentarmu!'}</div>
                          <div className="text-sm text-gray-600 truncate max-w-xs">{item.deskripsi_tugas}</div>
                        </td>
                        <td className="px-4 py-4">
                          {item.link_postingan ? (
                            <a 
                              href={item.link_postingan} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="text-blue-600 hover:text-blue-800 text-sm truncate max-w-xs block font-medium transition-colors"
                              title={item.link_postingan}
                            >
                              {formatUrl(item.link_postingan)}
                            </a>
                          ) : (
                            <span className="text-gray-500 text-sm">-</span>
                          )}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm font-semibold text-gray-800">{item.point_value} poin</div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm text-gray-800">{formatTimestamp(item.post_timestamp)}</div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <button
                            onClick={() => toggleActive(item.id, item.status)}
                            className={`inline-flex items-center px-3 py-1.5 rounded-full text-xs font-bold backdrop-blur-lg border transition-all duration-200 ${
                              item.status === 'tersedia'
                                ? 'bg-green-500/20 text-green-800 border-green-400/30 hover:bg-green-500/30'
                                : 'bg-red-500/20 text-red-800 border-red-400/30 hover:bg-red-500/30'
                            }`}
                          >
                            {getStatusLabel(item.status)}
                          </button>
                        </td>
                        <td className="relative">
                          {/* Floating Action Panel - Keluar dari tabel */}
                          <div className="absolute right-0 top-1/2 transform -translate-y-1/2 translate-x-6 opacity-0 group-hover:opacity-100 group-hover:translate-x-4 transition-all duration-300 z-10">
                            <div className="backdrop-blur-xl bg-white/20 border border-white/30 rounded-2xl shadow-2xl p-3">
                              <div className="flex flex-col gap-2">
                                <button
                                  onClick={() => router.push(`/admin/tugas/${item.id}`)}
                                  className="backdrop-blur-lg bg-blue-500/20 hover:bg-blue-500/30 border border-blue-400/30 text-blue-700 p-2.5 rounded-xl transition-all duration-200 hover:scale-105"
                                  title="Lihat Detail & Edit Submissions"
                                >
                                  <EyeIcon className="h-5 w-5" />
                                </button>
                                <button
                                  onClick={() => handleShare(item.id)}
                                  className="backdrop-blur-lg bg-green-500/20 hover:bg-green-500/30 border border-green-400/30 text-green-700 p-2.5 rounded-xl transition-all duration-200 hover:scale-105"
                                  title="Share Link Tugas"
                                >
                                  <ShareIcon className="h-5 w-5" />
                                </button>
                                <button
                                  onClick={(e) => openModal(item, e)}
                                  className="backdrop-blur-lg bg-indigo-500/20 hover:bg-indigo-500/30 border border-indigo-400/30 text-indigo-700 p-2.5 rounded-xl transition-all duration-200 hover:scale-105"
                                  title="Edit Tugas"
                                >
                                  <PencilIcon className="h-5 w-5" />
                                </button>
                                <button
                                  onClick={() => handleDelete(item.id)}
                                  className="backdrop-blur-lg bg-red-500/20 hover:bg-red-500/30 border border-red-400/30 text-red-700 p-2.5 rounded-xl transition-all duration-200 hover:scale-105"
                                  title="Hapus Tugas"
                                >
                                  <TrashIcon className="h-5 w-5" />
                                </button>
                              </div>
                            </div>
                          </div>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
          </div>

          {sortedItems.length === 0 && (
            <div className="text-center py-16">
              <div className="text-gray-600 text-lg font-medium">Belum ada data tugas</div>
              <p className="text-gray-500 text-sm mt-2">Silakan tambah tugas baru untuk mulai mengelola</p>
            </div>
          )}
        </div>
        </GlassContainer>

        {/* Statistics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <GlassCard title="Total Tugas" gradient="blue" className="p-4">
            <div className="text-2xl font-bold text-blue-600">{stats.total_tugas}</div>
          </GlassCard>
          <GlassCard title="Sedang Diverifikasi" gradient="yellow" className="p-4">
            <div className="text-2xl font-bold text-yellow-600">{stats.sedang_diverifikasi}</div>
          </GlassCard>
          <GlassCard title="Gagal Verifikasi" gradient="red" className="p-4">
            <div className="text-2xl font-bold text-red-600">{stats.gagal_diverifikasi}</div>
          </GlassCard>
          <GlassCard title="Terverifikasi" gradient="green" className="p-4">
            <div className="text-2xl font-bold text-green-600">{stats.verified}</div>
          </GlassCard>
        </div>

        {/* Modal - Using reusable AdminModal component */}
        <AdminModal
          isOpen={showModal}
          onClose={closeModal}
          title={editingItem ? 'Edit Tugas' : 'Tambah Tugas Baru'}
          maxWidth="max-w-md"
          position={modalPosition}
        >
          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label className="block text-sm font-semibold text-gray-800 mb-2">
                Keyword Tugas
              </label>
              <input
                type="text"
                value={formData.keyword_tugas}
                onChange={(e) => setFormData({ ...formData, keyword_tugas: e.target.value })}
                className="w-full px-4 py-3 backdrop-blur-lg bg-white/30 border border-white/40 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all duration-200"
                required
                placeholder="Masukkan keyword tugas..."
              />
            </div>

            <div>
              <label className="block text-sm font-semibold text-gray-800 mb-2">
                Deskripsi Tugas
              </label>
              <textarea
                value={formData.deskripsi_tugas}
                onChange={(e) => setFormData({ ...formData, deskripsi_tugas: e.target.value })}
                className="w-full px-4 py-3 backdrop-blur-lg bg-white/30 border border-white/40 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all duration-200"
                rows="3"
                placeholder="Deskripsi tugas..."
              />
            </div>

            <div>
              <label className="block text-sm font-semibold text-gray-800 mb-2">
                Link Postingan
              </label>
              <input
                type="url"
                value={formData.link_postingan}
                onChange={(e) => setFormData({ ...formData, link_postingan: e.target.value })}
                className="w-full px-4 py-3 backdrop-blur-lg bg-white/30 border border-white/40 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all duration-200"
                placeholder="https://..."
              />
            </div>

            <div>
              <label className="block text-sm font-semibold text-gray-800 mb-2">
                Point Value
              </label>
              <input
                type="number"
                value={formData.point_value}
                onChange={(e) => setFormData({ ...formData, point_value: e.target.value })}
                className="w-full px-4 py-3 backdrop-blur-lg bg-white/30 border border-white/40 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all duration-200"
                required
                min="1"
                placeholder="10"
              />
            </div>

            <div>
              <label className="block text-sm font-semibold text-gray-800 mb-2">
                Status
              </label>
              <select
                value={formData.status}
                onChange={(e) => setFormData({ ...formData, status: e.target.value })}
                className="w-full px-4 py-3 backdrop-blur-lg bg-white/30 border border-white/40 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all duration-200"
                required
              >
                {statusOptions.map(status => (
                  <option key={status.value} value={status.value}>{status.label}</option>
                ))}
              </select>
            </div>

            <div className="flex gap-3 pt-6">
              <GlassButton 
                variant="secondary"
                type="button" 
                onClick={closeModal}
                className="flex-1"
              >
                Batal
              </GlassButton>
              <GlassButton 
                variant="primary"
                type="submit"
                className="flex-1"
              >
                {editingItem ? 'Update' : 'Simpan'}
              </GlassButton>
            </div>
          </form>
        </AdminModal>

        {/* Scroll to Top Button */}
        <ScrollToTopButton />
      </div>
    </div>
  );
}
