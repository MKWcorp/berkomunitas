'use client';
import { useState, useEffect, useRef } from 'react';
import { useUser } from '@clerk/nextjs';
import { useSearchParams } from 'next/navigation';
import { 
  DocumentTextIcon, 
  GlobeAltIcon, 
  TrophyIcon, 
  StarIcon, 
  ChartBarIcon, 
  CheckCircleIcon, 
  XCircleIcon,
  ExclamationTriangleIcon,
  CameraIcon,
  SparklesIcon
} from '@heroicons/react/24/outline';
import { CheckCircleIcon as CheckCircleIconSolid } from '@heroicons/react/24/solid';
import DuplicateDataDialog from '../components/DuplicateDataDialog';
import GlassCard from '../components/GlassCard';

const TABS = [
  { key: 'edit', label: 'Edit Profil' },
  { key: 'badges', label: 'Lencana Saya' },
];

export default function ProfileDashboard() {
  const { user, isLoaded } = useUser();
  const searchParams = useSearchParams();
  const isRequired = searchParams.get('required') === 'true';
  const [loading, setLoading] = useState(true);
  const [tab, setTab] = useState('edit');
  const [message, setMessage] = useState('');
  const [profilePictureUrl, setProfilePictureUrl] = useState(null);
  const [uploading, setUploading] = useState(false);
  const fileInputRef = useRef(null);
  // Profile data state
  const [member, setMember] = useState(null);
  const [socialProfiles, setSocialProfiles] = useState([]);
  const [badges, setBadges] = useState([]);
  const [level, setLevel] = useState({ current: { level_number: 1, level_name: 'Pemula', required_points: 0 }, next: null, pointsToNextLevel: 0, progressPercent: 0 });
  const [isProfileIncomplete, setIsProfileIncomplete] = useState(false);

  useEffect(() => {
    // Hapus fetchDashboard, gunakan fetch user info lain jika perlu

    // Auto-generate username for user if they don't have one
    const ensureUsername = async () => {
      try {
        const usernameRes = await fetch('/api/profil/username', { credentials: 'include' });
        const usernameData = await usernameRes.json();
        if (usernameData.auto_generated) {
          console.log('Auto-generated username for user:', usernameData.username);
        }
      } catch (error) {
        console.error('Error ensuring username:', error);
      }
    };

    const init = async () => {
      if (isLoaded && user) {
        try {
          await ensureUsername();
          // Fetch dashboard data
          const res = await fetch('/api/profil/dashboard', { credentials: 'include' });
          const data = await res.json();
          if (res.ok && data.success) {
            const d = data.data || {};
            setMember(d.member || null);
            setSocialProfiles(d.socialProfiles || []);
            setBadges(d.badges || []);
            setLevel(d.level || { current: { level_number: 1, level_name: 'Pemula', required_points: 0 }, next: null, pointsToNextLevel: 0, progressPercent: 0 });
            if (d.member?.foto_profil_url && !profilePictureUrl) {
              setProfilePictureUrl(d.member.foto_profil_url);
            }
            const incomplete = !d.member?.nama_lengkap || !d.member?.nomer_wa || (d.socialProfiles || []).length === 0;
            setIsProfileIncomplete(incomplete);
          } else if (res.status === 401) {
            setMessage('Silakan login untuk melihat profil.');
          } else {
            setMessage(data.error || 'Gagal memuat data profil');
          }
        } catch (err) {
          console.error('Error init profile:', err);
          setMessage('Terjadi kesalahan saat memuat profil');
        } finally {
          setLoading(false);
        }
      } else if (isLoaded && !user) {
        setLoading(false);
        setMessage('Silakan login untuk melihat profil.');
      }
    };

    init();
  }, [user, isLoaded]);

  const handleFileChange = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    if (file.size > 5 * 1024 * 1024) {
      setMessage('Ukuran file maksimal 5MB');
      return;
    }

    setUploading(true);
  const formData = new FormData();
  // API expects 'file'; keep consistent
  formData.append('file', file);

    try {
      const response = await fetch('/api/profil/upload-foto', {
        method: 'POST',
        body: formData,
        credentials: 'include'
      });

      if (!response.ok) {
        // Try to extract error text for better message
        const errorText = await response.text();
        throw new Error(errorText || `Upload gagal (${response.status})`);
      }

      // Be tolerant to different shapes
      let result;
      try {
        result = await response.json();
      } catch {
        throw new Error('Response bukan JSON yang valid.');
      }

      if (result?.success) {
        const url = result.foto_profil_url || result.data?.foto_profil_url;
        if (url) setProfilePictureUrl(url);
        setMessage('Foto profil berhasil diperbarui!');
      } else {
        throw new Error(result?.error || 'Gagal mengupload foto');
      }
    } catch (error) {
      setMessage(error.message);
    } finally {
      setUploading(false);
    }
  };

  const handleGenerateAvatar = async () => {
    if (!member?.id) {
      setMessage('Data member tidak tersedia');
      return;
    }

    setUploading(true);
    try {
      const response = await fetch('/api/generate-avatar', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          memberId: member.id,
          nama_lengkap: member.nama_lengkap
        }),
        credentials: 'include'
      });

      if (!response.ok) {
        throw new Error('Gagal generate avatar');
      }

      const result = await response.json();
      if (result.success && result.avatarUrl) {
        setProfilePictureUrl(result.avatarUrl);
        setMessage('Avatar berhasil di-generate!');
      } else {
        throw new Error(result.error || 'Gagal generate avatar');
      }
    } catch (error) {
      setMessage(error.message);
    } finally {
      setUploading(false);
    }
  };

  if (loading) return (
    <GlassCard className="min-h-screen" padding="lg">
      <div className="text-center">
        <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-500 mx-auto mb-4"></div>
        <div className="text-xl font-semibold text-blue-600">Memuat profil...</div>
      </div>
    </GlassCard>
  );
  
  // ...hapus blok error dashboard

  // Data telah diikat dari state di atas

  return (
    <GlassCard className="min-h-screen" padding="lg">
      <div className="container mx-auto">        {/* Toast Notification - Mobile Responsive */}
        {message && (
          <GlassCard 
            variant="subtle" 
            padding="default" 
            className={`fixed top-4 left-4 right-4 sm:left-auto sm:right-4 sm:w-auto z-50 transition-all duration-500 ${
              message.includes('berhasil') 
                ? 'bg-green-100/50 border-green-400/30' 
                : 'bg-red-100/50 border-red-400/30'
            }`}
          >
            <div className="flex items-center">
              <div className="flex-shrink-0">
                {message.includes('berhasil') ? (
                  <CheckCircleIcon className="h-4 w-4 sm:h-5 sm:w-5 text-green-600" />
                ) : (
                  <XCircleIcon className="h-4 w-4 sm:h-5 sm:w-5 text-red-600" />
                )}
              </div>
              <div className="ml-2 sm:ml-3 flex-1">
                <p className={`text-xs sm:text-sm font-medium ${message.includes('berhasil') ? 'text-green-800' : 'text-red-800'}`}>{message}</p>
              </div>
              <div className="ml-2 sm:ml-auto sm:pl-3">
                <button
                  onClick={() => setMessage('')}
                  className={`inline-flex ${message.includes('berhasil') ? 'text-green-700 hover:text-green-600' : 'text-red-700 hover:text-red-600'}`}
                >
                  <span className="sr-only">Close</span>
                  <XCircleIcon className="h-4 w-4 sm:h-5 sm:w-5" />
                </button>
              </div>
            </div>
          </GlassCard>
        )}        {/* Page Header - Mobile Responsive */}
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6 sm:mb-8 space-y-2 sm:space-y-0">
          <h1 className="text-2xl sm:text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            Profil Dashboard
          </h1>
        </div>

        {/* Profile Incomplete Warning */}
        {(isRequired || isProfileIncomplete) && (
          <GlassCard variant="subtle" padding="default" className="mb-6 bg-red-100/50 border-red-400/30 border-l-4 border-l-red-500">
            <div className="flex">
              <div className="flex-shrink-0">
                <ExclamationTriangleIcon className="h-5 w-5 text-red-600" />
              </div>
              <div className="ml-3">
                <h3 className="text-sm font-medium text-red-800">
                  Profil Belum Lengkap
                </h3>
                <div className="mt-2 text-sm text-red-700">
                  <p>
                    Anda harus melengkapi profil sebelum dapat mengakses fitur lainnya. Pastikan mengisi:
                  </p>
                  <ul className="list-disc ml-5 mt-2 text-red-600">
                    {!member.nama_lengkap && <li>Nama lengkap</li>}
                    {!member.nomer_wa && <li>Nomor WhatsApp</li>}
                    {(!socialProfiles || socialProfiles.length === 0) && <li>Minimal 1 akun sosial media</li>}
                  </ul>
                  <p className="mt-2 font-medium text-amber-700">
                    Bonus: Dapatkan +5 loyalty point setelah profil lengkap!
                  </p>
                </div>
              </div>
            </div>
          </GlassCard>
        )}
          {/* Profile Header - Mobile Responsive */}
        <GlassCard variant="default" padding="lg" className="mb-6" hover>
          <div className="flex flex-col sm:flex-row items-center sm:items-start gap-4 sm:gap-6">
            <div className="relative flex-shrink-0">
              <img 
                src={(profilePictureUrl || member?.foto_profil_url) || '/placeholder-avatar.png'} 
                alt="Profile" 
                className="w-20 h-20 sm:w-24 sm:h-24 rounded-2xl object-cover border-4 border-blue-200/50 shadow-lg"
              />
              {uploading && (
                <div className="absolute inset-0 bg-white/80 rounded-2xl flex items-center justify-center">
                  <div className="w-6 h-6 sm:w-8 sm:h-8 border-4 border-t-blue-500 border-gray-300 rounded-full animate-spin"></div>
                </div>
              )}
            </div>
            <div className="flex-grow text-center sm:text-left">
              <h1 className="text-xl sm:text-2xl font-bold mb-1 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                {member?.nama_lengkap || 'Profil Anda'}
              </h1>
              <div className="flex flex-col sm:flex-row sm:flex-wrap items-center gap-2 sm:gap-4 mb-3">
                <span className="text-blue-600 font-semibold text-sm sm:text-base">
                  Level {level?.current?.level_number || 1}: {level?.current?.level_name || '-'}
                </span>
                <span className="text-gray-700 text-sm sm:text-base">
                  Loyalty Point: <span className="font-bold text-amber-600">{member?.loyalty_point || 0}</span>
                </span>
              </div>
              <input
                type="file"
                ref={fileInputRef}
                onChange={handleFileChange}
                className="hidden"
                accept="image/*"
              />
              <div className="flex flex-col sm:flex-row gap-2">
                <button 
                  onClick={() => fileInputRef.current.click()}
                  disabled={uploading}
                  className="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-3 py-2 sm:px-4 sm:py-2 rounded-2xl text-xs sm:text-sm font-medium transition-all duration-300 transform hover:scale-105 hover:shadow-lg hover:shadow-blue-500/25 disabled:opacity-50 flex items-center justify-center gap-2"
                >
                  <CameraIcon className="h-3 w-3 sm:h-4 sm:w-4" />
                  {uploading ? 'Mengupload...' : 'Upload Foto'}
                </button>
                <button 
                  onClick={handleGenerateAvatar}
                  disabled={uploading}
                  className="bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white px-3 py-2 sm:px-4 sm:py-2 rounded-2xl text-xs sm:text-sm font-medium transition-all duration-300 transform hover:scale-105 hover:shadow-lg hover:shadow-purple-500/25 disabled:opacity-50 flex items-center justify-center gap-2"
                >
                  <SparklesIcon className="h-3 w-3 sm:h-4 sm:w-4" />
                  {uploading ? 'Generating...' : 'Generate Avatar'}
                </button>
              </div>
            </div>
          </div>
        </GlassCard>        {/* Tabs - Mobile Responsive */}
        <div className="mb-6">
          <GlassCard variant="subtle" padding="sm" className="bg-white/10">
            <div className="flex space-x-1">
              {TABS.map((tabItem) => (
                <button
                  key={tabItem.key}
                  onClick={() => setTab(tabItem.key)}
                  className={`flex-1 py-2 sm:py-3 px-2 sm:px-4 rounded-2xl font-medium text-xs sm:text-sm transition-all duration-300 ${
                    tab === tabItem.key
                      ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white shadow-lg shadow-blue-500/25'
                      : 'text-gray-700 hover:text-blue-600 hover:bg-white/30'
                  }`}
                >
                  {tabItem.label}
                </button>
              ))}
            </div>
          </GlassCard>
        </div>

        {/* Tab Content */}
        <GlassCard variant="default" padding="lg" hover>
          {tab === 'edit' && <EditProfileTab member={member} socialProfiles={socialProfiles} message={message} setMessage={setMessage} />}
          {tab === 'badges' && <BadgesTab badges={badges} />}
        </GlassCard>
      </div>
    </GlassCard>
  );
}

// Edit Profile Tab Component dengan tema glass
function EditProfileTab({ member, socialProfiles, message, setMessage }) {
  const [formData, setFormData] = useState({
  nama_lengkap: member?.nama_lengkap || '',
  nomer_wa: member?.nomer_wa || '',
  });
  const [socialLink, setSocialLink] = useState('');
  const [saving, setSaving] = useState(false);
  const [socialProfiles2, setSocialProfiles] = useState(socialProfiles || []);
  const [duplicateDialogData, setDuplicateDialogData] = useState(null);
  const [fieldErrors, setFieldErrors] = useState({});
  
  // Username management state
  const [usernameData, setUsernameData] = useState({
    username: '',
    display_name: '',
    has_username: false,
    is_custom: false
  });
  const [usernameForm, setUsernameForm] = useState('');
  const [usernameLoading, setUsernameLoading] = useState(true);
  const [usernameMessage, setUsernameMessage] = useState('');

  // Fetch username data on mount
  useEffect(() => {
    fetchUsernameData();
  }, []);

  const fetchUsernameData = async () => {
    try {
      const response = await fetch('/api/profil/username');
      const data = await response.json();
      
      if (response.ok) {
        setUsernameData(data);
        setUsernameForm(data.username || '');
      }
    } catch (error) {
      console.error('Error fetching username data:', error);
    } finally {
      setUsernameLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSaving(true);
    setMessage('');
    setFieldErrors({});

    try {
      const response = await fetch('/api/profil', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
        credentials: 'include',
      });

      const result = await response.json();
      if (result.success) {
        if (result.data?.duplicateDialogData) {
          setDuplicateDialogData(result.data.duplicateDialogData);
        } else {
          setMessage('Profil berhasil diperbarui!');
          setTimeout(() => window.location.reload(), 1500);
        }
      } else {
        if (result.duplicate && result.field) {
          setFieldErrors({ [result.field]: result.error });
        } else {
          throw new Error(result.error || 'Gagal menyimpan profil.');
        }
      }
    } catch (error) {
      setMessage(error.message);
    } finally {
      setSaving(false);
    }
  };

  const handleUsernameSubmit = async (e) => {
    e.preventDefault();
    
    if (!usernameForm.trim()) {
      setUsernameMessage('Username tidak boleh kosong');
      return;
    }

    setSaving(true);
    setUsernameMessage('');

    try {
      const response = await fetch('/api/profil/username', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ username: usernameForm.trim() })
      });

      const result = await response.json();

      if (response.ok) {
        setUsernameMessage('Username berhasil diperbarui!');
        setUsernameData(prev => ({
          ...prev,
          username: result.data.username,
          display_name: result.data.display_name,
          has_username: true,
          is_custom: true
        }));
        setTimeout(() => setUsernameMessage(''), 5000);
      } else {
        setUsernameMessage(result.error || 'Gagal memperbarui username');
      }
    } catch (error) {
      console.error('Error updating username:', error);
      setUsernameMessage('Terjadi kesalahan saat memperbarui username');
    } finally {
      setSaving(false);
    }
  };

  const handleAddSocial = async (e) => {
    e.preventDefault();
    if (!socialLink.trim()) {
      setFieldErrors({ social_link: 'Link sosial media harus diisi.' });
      return;
    }

    setSaving(true);
    setFieldErrors({});
    try {
      const response = await fetch('/api/profil', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'add_social_link',
          link: socialLink.trim(),
        }),
        credentials: 'include',
      });

      const result = await response.json();
      if (result.success) {
        setSocialProfiles(prev => [...prev, result.data]);
        setSocialLink('');
        setMessage('Akun sosial media berhasil ditambahkan!');
      } else {
        if (result.duplicate && result.field) {
          setFieldErrors({ [result.field]: result.error });
        } else {
          throw new Error(result.error || 'Gagal menambahkan akun sosial media.');
        }
      }
    } catch (error) {
      setMessage(error.message);
    } finally {
      setSaving(false);
    }
  };

  const handleRemoveSocial = async (id) => {
    if (!confirm('Yakin ingin menghapus akun sosial media ini?')) return;

    setSaving(true);
    try {
      const response = await fetch('/api/profil', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'remove_social', id }),
        credentials: 'include',
      });

      const result = await response.json();
      if (result.success) {
        setSocialProfiles(prev => prev.filter(s => s.id !== id));
        setMessage('Akun sosial media berhasil dihapus!');
      } else {
        throw new Error(result.error || 'Gagal menghapus akun sosial media.');
      }
    } catch (error) {
      setMessage(error.message);
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="space-y-6">
      {duplicateDialogData && (
        <DuplicateDataDialog
          data={duplicateDialogData}
          onClose={() => setDuplicateDialogData(null)}
          onConfirm={() => window.location.reload()}
        />
      )}      <div>
        <h2 className="text-lg sm:text-xl font-bold mb-4 text-gray-800">Edit Profil</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-xs sm:text-sm font-medium text-gray-700 mb-1">
              Nama Lengkap <span className="text-red-600">*</span>
            </label>
            <input
              type="text"
              name="nama_lengkap"
              value={formData.nama_lengkap}
              onChange={handleInputChange}
              className="w-full p-2 sm:p-3 bg-white/50 border border-gray-300 rounded-2xl text-gray-800 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all placeholder-gray-500 text-sm sm:text-base"
              required
            />
          </div>

          <div>
            <label className="block text-xs sm:text-sm font-medium text-gray-700 mb-1">
              Nomor WhatsApp <span className="text-red-600">*</span>
            </label>
            <input
              type="text"
              name="nomer_wa"
              value={formData.nomer_wa}
              onChange={handleInputChange}
              placeholder="Contoh: 628123456789"
              className="w-full p-2 sm:p-3 bg-white/50 border border-gray-300 rounded-2xl text-gray-800 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all placeholder-gray-500 text-sm sm:text-base"
              required
            />
            {fieldErrors.nomer_wa && (
              <div className="mt-1 text-xs sm:text-sm text-red-700 bg-red-100/50 p-2 rounded-2xl border border-red-300">
                {fieldErrors.nomer_wa}
              </div>
            )}
          </div>

          <button
            type="submit"
            disabled={saving}
            className="w-full bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white py-2 sm:py-3 px-4 rounded-2xl font-medium transition-all duration-300 transform hover:scale-105 hover:shadow-lg hover:shadow-blue-500/25 disabled:opacity-50 disabled:cursor-not-allowed text-sm sm:text-base"
          >
            {saving ? 'Menyimpan...' : 'Simpan Profil'}
          </button>
        </form>
      </div>

      {/* Social Media Management */}
      <div>
        <h3 className="font-bold mb-4 text-gray-800 flex items-center gap-2">
          <GlobeAltIcon className="h-6 w-6 text-green-600" />
          Akun Sosial Media
        </h3>
        
        <div className="space-y-2 mb-4">
          {socialProfiles2.map((social) => (
            <div key={social.id} className="flex items-center justify-between p-3 bg-white/40 rounded-2xl border border-gray-200">
              <div>
                <span className="font-medium capitalize text-gray-800">{social.platform}</span>
                <span className="text-gray-600 ml-2">@{social.username_sosmed}</span>
              </div>
              <button
                onClick={() => handleRemoveSocial(social.id)}
                className="text-red-600 hover:text-red-500 text-sm px-3 py-1 rounded-2xl hover:bg-red-100/50 transition-all"
                disabled={saving}
              >
                Hapus
              </button>
            </div>
          ))}
          {socialProfiles2.length === 0 && (
            <div className="text-gray-700 text-center py-4">
              Belum ada akun sosial media yang ditambahkan
            </div>
          )}
        </div>

        <form onSubmit={handleAddSocial} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-800 mb-1">
              Link Profil Sosial Media <span className="text-red-600">*</span>
            </label>
            <input
              type="url"
              name="social_link"
              value={socialLink}
              onChange={(e) => setSocialLink(e.target.value)}
              placeholder="Contoh: https://instagram.com/johndoe"
              className="w-full p-3 bg-white/70 border border-gray-400 rounded-2xl text-gray-800 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
              required
            />
            {fieldErrors.social_link && (
              <div className="mt-1 text-sm text-red-700 bg-red-100/70 p-2 rounded-2xl border border-red-400/50">
                {fieldErrors.social_link}
              </div>
            )}
          </div>

          <button
            type="submit"
            disabled={saving}
            className="w-full bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white py-3 px-4 rounded-2xl font-medium transition-all duration-300 transform hover:scale-105 hover:shadow-lg hover:shadow-green-500/25 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {saving ? 'Menambahkan...' : 'Tambah Akun Sosial Media'}
          </button>
        </form>
      </div>

      {/* Username Management Section */}
      <div className="border-t border-gray-400 pt-6">
        <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
          <DocumentTextIcon className="h-6 w-6 text-blue-600" />
          Username Profil Publik
        </h3>
        
        {usernameLoading ? (
          <div className="flex items-center justify-center py-4">
            <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500"></div>
          </div>
        ) : (
          <>
            {usernameData.has_username ? (
              <div className="bg-blue-500/20 border border-blue-500/30 rounded-2xl p-4 mb-4">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-semibold text-blue-300">Username Saat Ini:</h4>
                    <p className="text-blue-200 font-mono">@{usernameData.username}</p>
                    <p className="text-sm text-blue-400 mt-1 flex items-center gap-1">
                      <DocumentTextIcon className="h-4 w-4" />
                      Link profil: <a href={`/profil/${usernameData.username}`} className="underline" target="_blank">/profil/{usernameData.username}</a>
                    </p>
                  </div>
                </div>
              </div>
            ) : (
              <div className="bg-yellow-500/20 border border-yellow-500/30 rounded-2xl p-4 mb-4">
                <p className="text-yellow-200">
                  Anda belum memiliki username untuk profil publik. Buat username untuk membuat profil Anda dapat diakses melalui link khusus.
                </p>
              </div>
            )}

            <form onSubmit={handleUsernameSubmit} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-800 mb-2">
                  Username Profil Publik {!usernameData.has_username && <span className="text-red-600">*</span>}
                </label>
                <div className="relative">
                  <span className="absolute left-3 top-3 text-gray-600">@</span>
                  <input
                    type="text"
                    value={usernameForm}
                    onChange={(e) => setUsernameForm(e.target.value)}
                    placeholder="username-unik-anda"
                    className="w-full pl-8 pr-3 py-3 bg-white/70 border border-gray-400 rounded-2xl text-gray-800 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                    pattern="[a-zA-Z0-9_-]{3,50}"
                    title="Username hanya boleh mengandung huruf, angka, underscore, dan dash. Minimal 3 karakter."
                  />
                </div>
                <p className="text-xs text-gray-700 mt-1">
                  3-50 karakter. Hanya huruf, angka, underscore (_), dan dash (-). Display name akan menggunakan nama lengkap Anda.
                </p>
              </div>

              <button
                type="submit"
                disabled={saving || !usernameForm.trim()}
                className="w-full bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white py-3 px-4 rounded-2xl font-medium transition-all duration-300 transform hover:scale-105 hover:shadow-lg hover:shadow-purple-500/25 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {saving ? 'Menyimpan...' : usernameData.has_username ? 'Update Username' : 'Buat Username'}
              </button>
            </form>

            {usernameMessage && (
              <div className={`mt-4 p-4 rounded-2xl ${usernameMessage.includes('berhasil') ? 'bg-green-100/80 text-green-800 border border-green-400' : 'bg-red-100/80 text-red-800 border border-red-400'}`}>
                {usernameMessage}
              </div>
            )}
          </>
        )}
      </div>

      {/* Complete Profile Save Button */}
      <div>
        <button
          onClick={handleSubmit}
          disabled={saving}
          className="w-full bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white py-3 px-4 rounded-2xl font-medium transition-all duration-300 transform hover:scale-105 hover:shadow-lg hover:shadow-blue-500/25 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {saving ? 'Menyimpan...' : 'Simpan Profil Lengkap'}
        </button>
        <p className="text-sm text-gray-600 text-center mt-2">
          Simpan untuk menyelesaikan semua perubahan profil Anda
        </p>
      </div>

      {message && (
        <div className={`p-4 rounded-2xl ${message.includes('berhasil') ? 'bg-green-100/80 text-green-800 border border-green-400' : 'bg-red-100/80 text-red-800 border border-red-400'}`}>
          {message}
        </div>
      )}
    </div>
  );
}

// Enhanced Badges Tab Component dengan tema gelap
function BadgesTab({ badges }) {
  const [availableBadges, setAvailableBadges] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchAvailableBadges();
  }, []);

  const fetchAvailableBadges = async () => {
    try {
      const response = await fetch('/api/admin/badges');
      if (response.ok) {
        const data = await response.json();
        setAvailableBadges(data.badges || []);
      }
    } catch (error) {
      console.error('Error fetching available badges:', error);
    } finally {
      setLoading(false);
    }
  };

  const getBadgeProgress = (badge) => {
    const earned = badges.find(b => b.id_badge === badge.id);
    return {
      earned: !!earned,
      earnedAt: earned?.earned_at || null
    };
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center py-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      {/* Lencana yang Diperoleh */}
      <div>
        <h2 className="text-2xl font-bold text-gray-800 mb-4 flex items-center gap-2">
          <TrophyIcon className="h-7 w-7 text-yellow-600" />
          Lencana yang Diperoleh ({badges.length})
        </h2>
        {badges.length === 0 ? (
          <div className="text-center py-8 bg-white/60 rounded-2xl border border-gray-300">
            <StarIcon className="h-16 w-16 mx-auto mb-4 text-gray-400" />
            <p className="text-gray-700">Belum ada lencana yang diperoleh.</p>
            <p className="text-sm text-gray-600 mt-2">Mulai berpartisipasi untuk mendapatkan lencana pertama Anda!</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {badges.map((badge, i) => (
              <div key={i} className="bg-gradient-to-br from-yellow-100/80 to-orange-100/80 border-2 border-yellow-400 rounded-2xl p-4 relative">
                <div className="absolute top-2 right-2">
                  <TrophyIcon className="h-8 w-8 text-yellow-600" />
                </div>
                <div className="text-lg font-bold text-yellow-800 mb-2">{badge.badge_name}</div>
                <p className="text-sm text-yellow-700 mb-3">{badge.description}</p>
                <div className="text-xs text-yellow-800 bg-yellow-200/80 px-2 py-1 rounded-2xl flex items-center gap-1">
                  <CheckCircleIcon className="h-3 w-3" />
                  Diperoleh: {badge.earned_at ? new Date(badge.earned_at).toLocaleDateString('id-ID') : '-'}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Semua Lencana yang Tersedia */}
      <div>
        <h2 className="text-2xl font-bold text-gray-800 mb-4 flex items-center gap-2">
          <StarIcon className="h-7 w-7 text-blue-600" />
          Semua Lencana Tersedia ({availableBadges.length})
        </h2>
        <p className="text-gray-700 mb-6">
          Kumpulkan semua lencana dengan berpartisipasi aktif dalam komunitas!
        </p>
        
        {availableBadges.length === 0 ? (
          <div className="text-center py-8 bg-white/60 rounded-2xl border border-gray-300">
            <p className="text-gray-700">Tidak ada data lencana yang tersedia.</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {availableBadges.map((badge) => {
              const progress = getBadgeProgress(badge);
              return (
                <div 
                  key={badge.id} 
                  className={`rounded-2xl p-4 border-2 transition-all duration-300 hover:scale-105 ${
                    progress.earned 
                      ? 'bg-gradient-to-br from-green-100/80 to-emerald-100/80 border-green-400' 
                      : 'bg-white/60 border-gray-400 hover:border-gray-500'
                  }`}
                >
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex-1">
                      <h3 className={`font-bold text-lg ${progress.earned ? 'text-green-800' : 'text-gray-800'}`}>
                        {badge.badge_name}
                      </h3>
                      <p className={`text-sm mt-1 ${progress.earned ? 'text-green-700' : 'text-gray-700'}`}>
                        {badge.description}
                      </p>
                    </div>
                    <div className="ml-3">
                      {progress.earned ? (
                        <CheckCircleIconSolid className="h-8 w-8 text-green-600" />
                      ) : (
                        <XCircleIcon className="h-8 w-8 text-gray-400 opacity-50" />
                      )}
                    </div>
                  </div>

                  {/* Kriteria Badge */}
                  <div className={`text-xs px-3 py-2 rounded-2xl ${
                    progress.earned ? 'bg-green-200/80 text-green-800' : 'bg-blue-100/80 text-blue-800'
                  }`}>
                    <div className="font-medium mb-1 flex items-center gap-1">
                      {progress.earned ? (
                        <>
                          <CheckCircleIcon className="h-4 w-4" />
                          Sudah Diperoleh!
                        </>
                      ) : (
                        <>
                          <StarIcon className="h-4 w-4" />
                          Cara Mendapatkan:
                        </>
                      )}
                    </div>
                    <div>
                      {progress.earned ? (
                        `Diperoleh pada ${new Date(progress.earnedAt).toLocaleDateString('id-ID')}`
                      ) : (
                        `${badge.criteria_type}: ${badge.criteria_value} ${
                          badge.criteria_type === 'comment_count' ? 'komentar' :
                          badge.criteria_type === 'loyalty_points' ? 'poin' :
                          badge.criteria_type === 'task_completion' ? 'tugas selesai' :
                          badge.criteria_type === 'social_media_count' ? 'akun sosial media' :
                          'aktivitas'
                        }`
                      )}
                    </div>
                  </div>

                  {/* Progress Bar untuk Badge yang Belum Diperoleh */}
                  {!progress.earned && (
                    <div className="mt-3">
                      <div className="w-full bg-gray-300 rounded-full h-2">
                        <div 
                          className="bg-blue-500 h-2 rounded-full transition-all duration-300"
                          style={{ width: '0%' }}
                        ></div>
                      </div>
                      <p className="text-xs text-gray-600 mt-1">
                        Mulai berpartisipasi untuk mendapatkan lencana ini
                      </p>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        )}
      </div>

      {/* Summary Stats */}
      <div className="bg-gradient-to-r from-blue-100/80 to-purple-100/80 rounded-2xl p-6 border border-blue-400">
        <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center gap-2">
          <ChartBarIcon className="h-6 w-6 text-purple-600" />
          Statistik Lencana
        </h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="text-center">
            <div className="text-3xl font-bold text-blue-600">{badges.length}</div>
            <div className="text-sm text-gray-700">Diperoleh</div>
          </div>
          <div className="text-center">
            <div className="text-3xl font-bold text-purple-600">{availableBadges.length - badges.length}</div>
            <div className="text-sm text-gray-700">Tersisa</div>
          </div>
          <div className="text-center">
            <div className="text-3xl font-bold text-green-600">
              {availableBadges.length > 0 ? Math.round((badges.length / availableBadges.length) * 100) : 0}%
            </div>
            <div className="text-sm text-gray-700">Progres</div>
          </div>
          <div className="text-center">
            <div className="text-3xl font-bold text-orange-600">{availableBadges.length}</div>
            <div className="text-sm text-gray-700">Total</div>
          </div>
        </div>
      </div>
    </div>
  );
}
